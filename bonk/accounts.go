// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the accounts defined in the IDL.

package raydium_launchpad

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyAccount(accountData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek account discriminator: %w", err)
	}
	switch discriminator {
	case Account_GlobalConfig:
		value := new(GlobalConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as GlobalConfig: %w", err)
		}
		return value, nil
	case Account_PlatformConfig:
		value := new(PlatformConfig)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PlatformConfig: %w", err)
		}
		return value, nil
	case Account_PoolState:
		value := new(PoolState)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as PoolState: %w", err)
		}
		return value, nil
	case Account_VestingRecord:
		value := new(VestingRecord)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal account as VestingRecord: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseAccount_GlobalConfig(accountData []byte) (*GlobalConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_GlobalConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_GlobalConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(GlobalConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type GlobalConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_PlatformConfig(accountData []byte) (*PlatformConfig, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PlatformConfig {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PlatformConfig, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PlatformConfig)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PlatformConfig: %w", err)
	}
	return acc, nil
}

func ParseAccount_PoolState(accountData []byte) (*PoolState, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_PoolState {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_PoolState, binary.FormatDiscriminator(discriminator))
	}
	acc := new(PoolState)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type PoolState: %w", err)
	}
	return acc, nil
}

func ParseAccount_VestingRecord(accountData []byte) (*VestingRecord, error) {
	decoder := binary.NewBorshDecoder(accountData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Account_VestingRecord {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Account_VestingRecord, binary.FormatDiscriminator(discriminator))
	}
	acc := new(VestingRecord)
	err = acc.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal account of type VestingRecord: %w", err)
	}
	return acc, nil
}
