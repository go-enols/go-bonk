// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the events defined in the IDL.

package raydium_launchpad

import (
	"fmt"
	binary "github.com/gagliardetto/binary"
)

func ParseAnyEvent(eventData []byte) (any, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek event discriminator: %w", err)
	}
	switch discriminator {
	case Event_ClaimVestedEvent:
		value := new(ClaimVestedEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as ClaimVestedEvent: %w", err)
		}
		return value, nil
	case Event_CreateVestingEvent:
		value := new(CreateVestingEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as CreateVestingEvent: %w", err)
		}
		return value, nil
	case Event_PoolCreateEvent:
		value := new(PoolCreateEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as PoolCreateEvent: %w", err)
		}
		return value, nil
	case Event_TradeEvent:
		value := new(TradeEvent)
		err := value.UnmarshalWithDecoder(decoder)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal event as TradeEvent: %w", err)
		}
		return value, nil
	default:
		return nil, fmt.Errorf("unknown discriminator: %s", binary.FormatDiscriminator(discriminator))
	}
}

func ParseEvent_ClaimVestedEvent(eventData []byte) (*ClaimVestedEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_ClaimVestedEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_ClaimVestedEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(ClaimVestedEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type ClaimVestedEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_CreateVestingEvent(eventData []byte) (*CreateVestingEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_CreateVestingEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_CreateVestingEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(CreateVestingEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type CreateVestingEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_PoolCreateEvent(eventData []byte) (*PoolCreateEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_PoolCreateEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_PoolCreateEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(PoolCreateEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type PoolCreateEvent: %w", err)
	}
	return event, nil
}

func ParseEvent_TradeEvent(eventData []byte) (*TradeEvent, error) {
	decoder := binary.NewBorshDecoder(eventData)
	discriminator, err := decoder.ReadDiscriminator()
	if err != nil {
		return nil, fmt.Errorf("failed to peek discriminator: %w", err)
	}
	if discriminator != Event_TradeEvent {
		return nil, fmt.Errorf("expected discriminator %v, got %s", Event_TradeEvent, binary.FormatDiscriminator(discriminator))
	}
	event := new(TradeEvent)
	err = event.UnmarshalWithDecoder(decoder)
	if err != nil {
		return nil, fmt.Errorf("failed to unmarshal event of type TradeEvent: %w", err)
	}
	return event, nil
}
