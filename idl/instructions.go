// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains instructions.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Builds a "buy_exact_in" instruction.
// Use the given amount of quote tokens to purchase base tokens. // # Arguments //  // * `ctx` - The context of accounts // * `amount_in` - Amount of quote token to purchase // * `minimum_amount_out` - Minimum amount of base token to receive (slippage protection) // * `share_fee_rate` - Fee rate for the share //
func NewBuyExactInInstruction(
	// Params:
	amountInParam uint64,
	minimumAmountOutParam uint64,
	shareFeeRateParam uint64,

	// Accounts:
	payerAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	platformConfigAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	userQuoteTokenAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	baseTokenMintAccount solanago.PublicKey,
	quoteTokenMintAccount solanago.PublicKey,
	baseTokenProgramAccount solanago.PublicKey,
	quoteTokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_BuyExactIn[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `amountInParam`:
		err = enc__.Encode(amountInParam)
		if err != nil {
			return nil, errors.NewField("amountInParam", err)
		}
		// Serialize `minimumAmountOutParam`:
		err = enc__.Encode(minimumAmountOutParam)
		if err != nil {
			return nil, errors.NewField("minimumAmountOutParam", err)
		}
		// Serialize `shareFeeRateParam`:
		err = enc__.Encode(shareFeeRateParam)
		if err != nil {
			return nil, errors.NewField("shareFeeRateParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "payer": Read-only, Signer, Required
		// The user performing the swap operation
		// Must sign the transaction and pay for fees
		accounts__.Append(solanago.NewAccountMeta(payerAccount, false, true))
		// Account 1 "authority": Read-only, Non-signer, Required
		// PDA that acts as the authority for pool vault operations
		// Generated using AUTH_SEED
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, false, false))
		// Account 2 "global_config": Read-only, Non-signer, Required
		// Global configuration account containing protocol-wide settings
		// Used to read protocol fee rates and curve type
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 3 "platform_config": Read-only, Non-signer, Required
		// Platform configuration account containing platform-wide settings
		// Used to read platform fee rate
		accounts__.Append(solanago.NewAccountMeta(platformConfigAccount, false, false))
		// Account 4 "pool_state": Writable, Non-signer, Required
		// The pool state account where the swap will be performed
		// Contains current pool parameters and balances
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 5 "user_base_token": Writable, Non-signer, Required
		// The user's token account for base tokens (tokens being bought)
		// Will receive the output tokens after the swap
		accounts__.Append(solanago.NewAccountMeta(userBaseTokenAccount, true, false))
		// Account 6 "user_quote_token": Writable, Non-signer, Required
		// The user's token account for quote tokens (tokens being sold)
		// Will be debited for the input amount
		accounts__.Append(solanago.NewAccountMeta(userQuoteTokenAccount, true, false))
		// Account 7 "base_vault": Writable, Non-signer, Required
		// The pool's vault for base tokens
		// Will be debited to send tokens to the user
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 8 "quote_vault": Writable, Non-signer, Required
		// The pool's vault for quote tokens
		// Will receive the input tokens from the user
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 9 "base_token_mint": Read-only, Non-signer, Required
		// The mint of the base token
		// Used for transfer fee calculations if applicable
		accounts__.Append(solanago.NewAccountMeta(baseTokenMintAccount, false, false))
		// Account 10 "quote_token_mint": Read-only, Non-signer, Required
		// The mint of the quote token
		accounts__.Append(solanago.NewAccountMeta(quoteTokenMintAccount, false, false))
		// Account 11 "base_token_program": Read-only, Non-signer, Required
		// SPL Token program for base token transfers
		accounts__.Append(solanago.NewAccountMeta(baseTokenProgramAccount, false, false))
		// Account 12 "quote_token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL Token program for quote token transfers
		accounts__.Append(solanago.NewAccountMeta(quoteTokenProgramAccount, false, false))
		// Account 13 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 14 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "buy_exact_out" instruction.
// Use quote tokens to purchase the given amount of base tokens. // # Arguments //  // * `ctx` - The context of accounts // * `amount_out` - Amount of base token to receive // * `maximum_amount_in` - Maximum amount of quote token to purchase (slippage protection) // * `share_fee_rate` - Fee rate for the share
func NewBuyExactOutInstruction(
	// Params:
	amountOutParam uint64,
	maximumAmountInParam uint64,
	shareFeeRateParam uint64,

	// Accounts:
	payerAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	platformConfigAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	userQuoteTokenAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	baseTokenMintAccount solanago.PublicKey,
	quoteTokenMintAccount solanago.PublicKey,
	baseTokenProgramAccount solanago.PublicKey,
	quoteTokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_BuyExactOut[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `amountOutParam`:
		err = enc__.Encode(amountOutParam)
		if err != nil {
			return nil, errors.NewField("amountOutParam", err)
		}
		// Serialize `maximumAmountInParam`:
		err = enc__.Encode(maximumAmountInParam)
		if err != nil {
			return nil, errors.NewField("maximumAmountInParam", err)
		}
		// Serialize `shareFeeRateParam`:
		err = enc__.Encode(shareFeeRateParam)
		if err != nil {
			return nil, errors.NewField("shareFeeRateParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "payer": Read-only, Signer, Required
		// The user performing the swap operation
		// Must sign the transaction and pay for fees
		accounts__.Append(solanago.NewAccountMeta(payerAccount, false, true))
		// Account 1 "authority": Read-only, Non-signer, Required
		// PDA that acts as the authority for pool vault operations
		// Generated using AUTH_SEED
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, false, false))
		// Account 2 "global_config": Read-only, Non-signer, Required
		// Global configuration account containing protocol-wide settings
		// Used to read protocol fee rates and curve type
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 3 "platform_config": Read-only, Non-signer, Required
		// Platform configuration account containing platform-wide settings
		// Used to read platform fee rate
		accounts__.Append(solanago.NewAccountMeta(platformConfigAccount, false, false))
		// Account 4 "pool_state": Writable, Non-signer, Required
		// The pool state account where the swap will be performed
		// Contains current pool parameters and balances
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 5 "user_base_token": Writable, Non-signer, Required
		// The user's token account for base tokens (tokens being bought)
		// Will receive the output tokens after the swap
		accounts__.Append(solanago.NewAccountMeta(userBaseTokenAccount, true, false))
		// Account 6 "user_quote_token": Writable, Non-signer, Required
		// The user's token account for quote tokens (tokens being sold)
		// Will be debited for the input amount
		accounts__.Append(solanago.NewAccountMeta(userQuoteTokenAccount, true, false))
		// Account 7 "base_vault": Writable, Non-signer, Required
		// The pool's vault for base tokens
		// Will be debited to send tokens to the user
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 8 "quote_vault": Writable, Non-signer, Required
		// The pool's vault for quote tokens
		// Will receive the input tokens from the user
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 9 "base_token_mint": Read-only, Non-signer, Required
		// The mint of the base token
		// Used for transfer fee calculations if applicable
		accounts__.Append(solanago.NewAccountMeta(baseTokenMintAccount, false, false))
		// Account 10 "quote_token_mint": Read-only, Non-signer, Required
		// The mint of the quote token
		accounts__.Append(solanago.NewAccountMeta(quoteTokenMintAccount, false, false))
		// Account 11 "base_token_program": Read-only, Non-signer, Required
		// SPL Token program for base token transfers
		accounts__.Append(solanago.NewAccountMeta(baseTokenProgramAccount, false, false))
		// Account 12 "quote_token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL Token program for quote token transfers
		accounts__.Append(solanago.NewAccountMeta(quoteTokenProgramAccount, false, false))
		// Account 13 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 14 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "claim_platform_fee" instruction.
// Claim platform fee // # Arguments //  // * `ctx` - The context of accounts //
func NewClaimPlatformFeeInstruction(
	platformFeeWalletAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	platformConfigAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	recipientTokenAccountAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "platform_fee_wallet": Writable, Signer, Required
		// Only the wallet stored in platform_config can collect platform fees
		accounts__.Append(solanago.NewAccountMeta(platformFeeWalletAccount, true, true))
		// Account 1 "authority": Read-only, Non-signer, Required
		// PDA that acts as the authority for pool vault and mint operations
		// Generated using AUTH_SEED
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, false, false))
		// Account 2 "pool_state": Writable, Non-signer, Required
		// Account that stores the pool's state and parameters
		// PDA generated using POOL_SEED and both token mints
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 3 "platform_config": Read-only, Non-signer, Required
		// The platform config account
		accounts__.Append(solanago.NewAccountMeta(platformConfigAccount, false, false))
		// Account 4 "quote_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 5 "recipient_token_account": Writable, Non-signer, Required
		// The address that receives the collected quote token fees
		accounts__.Append(solanago.NewAccountMeta(recipientTokenAccountAccount, true, false))
		// Account 6 "quote_mint": Read-only, Non-signer, Required
		// The mint of quote token vault
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 7 "token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL program for input token transfers
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
		// Account 8 "system_program": Read-only, Non-signer, Required
		// Required for account creation
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 9 "associated_token_program": Read-only, Non-signer, Required, Address: ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL
		// Required for associated token program
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "claim_vested_token" instruction.
// Claim vested token // # Arguments
func NewClaimVestedTokenInstruction(
	beneficiaryAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	vestingRecordAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	baseTokenMintAccount solanago.PublicKey,
	baseTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "beneficiary": Writable, Signer, Required
		// The beneficiary of the vesting account
		accounts__.Append(solanago.NewAccountMeta(beneficiaryAccount, true, true))
		// Account 1 "authority": Read-only, Non-signer, Required
		// PDA that acts as the authority for pool vault and mint operations
		// Generated using AUTH_SEED
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, false, false))
		// Account 2 "pool_state": Writable, Non-signer, Required
		// Account that stores the pool's state and parameters
		// PDA generated using POOL_SEED and both token mints
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 3 "vesting_record": Writable, Non-signer, Required
		// The vesting record account
		accounts__.Append(solanago.NewAccountMeta(vestingRecordAccount, true, false))
		// Account 4 "base_vault": Writable, Non-signer, Required
		// The pool's vault for base tokens
		// Will be debited to send tokens to the user
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 5 "user_base_token": Writable, Signer, Required
		accounts__.Append(solanago.NewAccountMeta(userBaseTokenAccount, true, true))
		// Account 6 "base_token_mint": Read-only, Non-signer, Required
		// The mint for the base token (token being sold)
		// Created in this instruction with specified decimals
		accounts__.Append(solanago.NewAccountMeta(baseTokenMintAccount, false, false))
		// Account 7 "base_token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL Token program for the base token
		// Must be the standard Token program
		accounts__.Append(solanago.NewAccountMeta(baseTokenProgramAccount, false, false))
		// Account 8 "system_program": Read-only, Non-signer, Required
		// Required for account creation
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 9 "associated_token_program": Read-only, Non-signer, Required, Address: ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL
		// Required for associated token program
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "collect_fee" instruction.
// Collects accumulated fees from the pool // # Arguments //  // * `ctx` - The context of accounts //
func NewCollectFeeInstruction(
	ownerAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	recipientTokenAccountAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		// Only protocol_fee_owner saved in global_config can collect protocol fee now
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, false, false))
		// Account 2 "pool_state": Writable, Non-signer, Required
		// Pool state stores accumulated protocol fee amount
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 3 "global_config": Read-only, Non-signer, Required
		// Global config account stores owner
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 4 "quote_vault": Writable, Non-signer, Required
		// The address that holds pool tokens for quote token
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 5 "quote_mint": Read-only, Non-signer, Required
		// The mint of quote token vault
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 6 "recipient_token_account": Writable, Non-signer, Required
		// The address that receives the collected quote token fees
		accounts__.Append(solanago.NewAccountMeta(recipientTokenAccountAccount, true, false))
		// Account 7 "token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL program for input token transfers
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "collect_migrate_fee" instruction.
// Collects  migrate fees from the pool // # Arguments //  // * `ctx` - The context of accounts //
func NewCollectMigrateFeeInstruction(
	ownerAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	recipientTokenAccountAccount solanago.PublicKey,
	tokenProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required
		// Only migrate_fee_owner saved in global_config can collect migrate fee now
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, false, false))
		// Account 2 "pool_state": Writable, Non-signer, Required
		// Pool state stores accumulated protocol fee amount
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 3 "global_config": Read-only, Non-signer, Required
		// Global config account stores owner
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 4 "quote_vault": Writable, Non-signer, Required
		// The address that holds pool tokens for quote token
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 5 "quote_mint": Read-only, Non-signer, Required
		// The mint of quote token vault
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 6 "recipient_token_account": Writable, Non-signer, Required
		// The address that receives the collected quote token fees
		accounts__.Append(solanago.NewAccountMeta(recipientTokenAccountAccount, true, false))
		// Account 7 "token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL program for input token transfers
		accounts__.Append(solanago.NewAccountMeta(tokenProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "create_config" instruction.
// Creates a new configuration // # Arguments //  // * `ctx` - The accounts needed by instruction // * `curve_type` - The type of bonding curve (0: ConstantProduct) // * `index` - The index of config, there may be multiple config with the same curve type. // * `trade_fee_rate` - Trade fee rate, must be less than RATE_DENOMINATOR_VALUE //
func NewCreateConfigInstruction(
	// Params:
	curveTypeParam uint8,
	indexParam uint16,
	migrateFeeParam uint64,
	tradeFeeRateParam uint64,

	// Accounts:
	ownerAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	quoteTokenMintAccount solanago.PublicKey,
	protocolFeeOwnerAccount solanago.PublicKey,
	migrateFeeOwnerAccount solanago.PublicKey,
	migrateToAmmWalletAccount solanago.PublicKey,
	migrateToCpswapWalletAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `curveTypeParam`:
		err = enc__.Encode(curveTypeParam)
		if err != nil {
			return nil, errors.NewField("curveTypeParam", err)
		}
		// Serialize `indexParam`:
		err = enc__.Encode(indexParam)
		if err != nil {
			return nil, errors.NewField("indexParam", err)
		}
		// Serialize `migrateFeeParam`:
		err = enc__.Encode(migrateFeeParam)
		if err != nil {
			return nil, errors.NewField("migrateFeeParam", err)
		}
		// Serialize `tradeFeeRateParam`:
		err = enc__.Encode(tradeFeeRateParam)
		if err != nil {
			return nil, errors.NewField("tradeFeeRateParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Writable, Signer, Required, Address: GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ
		// The protocol owner/admin account
		// Must match the predefined admin address
		// Has authority to create and modify protocol configurations
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, true, true))
		// Account 1 "global_config": Writable, Non-signer, Required
		// Global configuration account that stores protocol-wide settings
		// PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
		// Stores fee rates and protocol parameters
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, true, false))
		// Account 2 "quote_token_mint": Read-only, Non-signer, Required
		// The mint address of the quote token (token used for buying)
		// This will be the standard token used for all pools with this config
		accounts__.Append(solanago.NewAccountMeta(quoteTokenMintAccount, false, false))
		// Account 3 "protocol_fee_owner": Read-only, Non-signer, Required
		// Account that will receive protocol fees
		accounts__.Append(solanago.NewAccountMeta(protocolFeeOwnerAccount, false, false))
		// Account 4 "migrate_fee_owner": Read-only, Non-signer, Required
		// Account that will receive migrate fees
		accounts__.Append(solanago.NewAccountMeta(migrateFeeOwnerAccount, false, false))
		// Account 5 "migrate_to_amm_wallet": Read-only, Non-signer, Required
		// The control wallet address for migrating to amm
		accounts__.Append(solanago.NewAccountMeta(migrateToAmmWalletAccount, false, false))
		// Account 6 "migrate_to_cpswap_wallet": Read-only, Non-signer, Required
		// The control wallet address for migrating to cpswap
		accounts__.Append(solanago.NewAccountMeta(migrateToCpswapWalletAccount, false, false))
		// Account 7 "system_program": Read-only, Non-signer, Required
		// Required for account creation
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_platform_config" instruction.
// Create platform config account // # Arguments //  // * `ctx` - The context of accounts // # Fields // * `fee_rate` - Fee rate of the platform // * `name` - Name of the platform // * `web` - Website of the platform // * `img` - Image link of the platform //
func NewCreatePlatformConfigInstruction(
	// Params:
	platformParamsParam PlatformParams,

	// Accounts:
	platformAdminAccount solanago.PublicKey,
	platformFeeWalletAccount solanago.PublicKey,
	platformNftWalletAccount solanago.PublicKey,
	platformConfigAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreatePlatformConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `platformParamsParam`:
		err = enc__.Encode(platformParamsParam)
		if err != nil {
			return nil, errors.NewField("platformParamsParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "platform_admin": Writable, Signer, Required
		// The account paying for the initialization costs
		accounts__.Append(solanago.NewAccountMeta(platformAdminAccount, true, true))
		// Account 1 "platform_fee_wallet": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(platformFeeWalletAccount, false, false))
		// Account 2 "platform_nft_wallet": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(platformNftWalletAccount, false, false))
		// Account 3 "platform_config": Writable, Non-signer, Required
		// The platform config account
		accounts__.Append(solanago.NewAccountMeta(platformConfigAccount, true, false))
		// Account 4 "system_program": Read-only, Non-signer, Required
		// Required for account creation
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "create_vesting_account" instruction.
// Create vesting account // # Arguments //  // * `ctx` - The context of accounts // * `share` - The share amount of base token to be vested //
func NewCreateVestingAccountInstruction(
	// Params:
	shareAmountParam uint64,

	// Accounts:
	creatorAccount solanago.PublicKey,
	beneficiaryAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	vestingRecordAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_CreateVestingAccount[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `shareAmountParam`:
		err = enc__.Encode(shareAmountParam)
		if err != nil {
			return nil, errors.NewField("shareAmountParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "creator": Writable, Signer, Required
		// The account paying for the initialization costs
		// This can be any account with sufficient SOL to cover the transaction
		accounts__.Append(solanago.NewAccountMeta(creatorAccount, true, true))
		// Account 1 "beneficiary": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(beneficiaryAccount, true, false))
		// Account 2 "pool_state": Writable, Non-signer, Required
		// The pool state account
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 3 "vesting_record": Writable, Non-signer, Required
		// The vesting record account
		accounts__.Append(solanago.NewAccountMeta(vestingRecordAccount, true, false))
		// Account 4 "system_program": Read-only, Non-signer, Required
		// Required for account creation
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "initialize" instruction.
// Initializes a new trading pool // # Arguments //  // * `ctx` - The context of accounts containing pool and token information //
func NewInitializeInstruction(
	// Params:
	baseMintParamParam MintParams,
	curveParamParam CurveParams,
	vestingParamParam VestingParams,

	// Accounts:
	payerAccount solanago.PublicKey,
	creatorAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	platformConfigAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	metadataAccountAccount solanago.PublicKey,
	baseTokenProgramAccount solanago.PublicKey,
	quoteTokenProgramAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	rentProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_Initialize[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `baseMintParamParam`:
		err = enc__.Encode(baseMintParamParam)
		if err != nil {
			return nil, errors.NewField("baseMintParamParam", err)
		}
		// Serialize `curveParamParam`:
		{
			err := EncodeCurveParams(enc__, curveParamParam)
			if err != nil {
				return nil, errors.NewField("curveParamParam", err)
			}
		}
		// Serialize `vestingParamParam`:
		err = enc__.Encode(vestingParamParam)
		if err != nil {
			return nil, errors.NewField("vestingParamParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "payer": Writable, Signer, Required
		// The account paying for the initialization costs
		// This can be any account with sufficient SOL to cover the transaction
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 1 "creator": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(creatorAccount, false, false))
		// Account 2 "global_config": Read-only, Non-signer, Required
		// Global configuration account containing protocol-wide settings
		// Includes settings like quote token mint and fee parameters
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 3 "platform_config": Read-only, Non-signer, Required
		// Platform configuration account containing platform info
		// Includes settings like the fee_rate, name, web, img of the platform
		accounts__.Append(solanago.NewAccountMeta(platformConfigAccount, false, false))
		// Account 4 "authority": Read-only, Non-signer, Required
		// PDA that acts as the authority for pool vault and mint operations
		// Generated using AUTH_SEED
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, false, false))
		// Account 5 "pool_state": Writable, Non-signer, Required
		// Account that stores the pool's state and parameters
		// PDA generated using POOL_SEED and both token mints
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 6 "base_mint": Writable, Signer, Required
		// The mint for the base token (token being sold)
		// Created in this instruction with specified decimals
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, true, true))
		// Account 7 "quote_mint": Read-only, Non-signer, Required
		// The mint for the quote token (token used to buy)
		// Must match the quote_mint specified in global config
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 8 "base_vault": Writable, Non-signer, Required
		// Token account that holds the pool's base tokens
		// PDA generated using POOL_VAULT_SEED
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 9 "quote_vault": Writable, Non-signer, Required
		// Token account that holds the pool's quote tokens
		// PDA generated using POOL_VAULT_SEED
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 10 "metadata_account": Writable, Non-signer, Required
		// Account to store the base token's metadata
		// Created using Metaplex metadata program
		accounts__.Append(solanago.NewAccountMeta(metadataAccountAccount, true, false))
		// Account 11 "base_token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL Token program for the base token
		// Must be the standard Token program
		accounts__.Append(solanago.NewAccountMeta(baseTokenProgramAccount, false, false))
		// Account 12 "quote_token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL Token program for the quote token
		accounts__.Append(solanago.NewAccountMeta(quoteTokenProgramAccount, false, false))
		// Account 13 "metadata_program": Read-only, Non-signer, Required, Address: metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s
		// Metaplex Token Metadata program
		// Used to create metadata for the base token
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
		// Account 14 "system_program": Read-only, Non-signer, Required
		// Required for account creation
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 15 "rent_program": Read-only, Non-signer, Required, Address: SysvarRent111111111111111111111111111111111
		// Required for rent exempt calculations
		accounts__.Append(solanago.NewAccountMeta(rentProgramAccount, false, false))
		// Account 16 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 17 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "migrate_to_amm" instruction.
// # Arguments //  // * `ctx` - The context of accounts //
func NewMigrateToAmmInstruction(
	// Params:
	baseLotSizeParam uint64,
	quoteLotSizeParam uint64,
	marketVaultSignerNonceParam uint8,

	// Accounts:
	payerAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	openbookProgramAccount solanago.PublicKey,
	marketAccount solanago.PublicKey,
	requestQueueAccount solanago.PublicKey,
	eventQueueAccount solanago.PublicKey,
	bidsAccount solanago.PublicKey,
	asksAccount solanago.PublicKey,
	marketVaultSignerAccount solanago.PublicKey,
	marketBaseVaultAccount solanago.PublicKey,
	marketQuoteVaultAccount solanago.PublicKey,
	ammProgramAccount solanago.PublicKey,
	ammPoolAccount solanago.PublicKey,
	ammAuthorityAccount solanago.PublicKey,
	ammOpenOrdersAccount solanago.PublicKey,
	ammLpMintAccount solanago.PublicKey,
	ammBaseVaultAccount solanago.PublicKey,
	ammQuoteVaultAccount solanago.PublicKey,
	ammTargetOrdersAccount solanago.PublicKey,
	ammConfigAccount solanago.PublicKey,
	ammCreateFeeDestinationAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	poolLpTokenAccount solanago.PublicKey,
	splTokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	rentProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_MigrateToAmm[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `baseLotSizeParam`:
		err = enc__.Encode(baseLotSizeParam)
		if err != nil {
			return nil, errors.NewField("baseLotSizeParam", err)
		}
		// Serialize `quoteLotSizeParam`:
		err = enc__.Encode(quoteLotSizeParam)
		if err != nil {
			return nil, errors.NewField("quoteLotSizeParam", err)
		}
		// Serialize `marketVaultSignerNonceParam`:
		err = enc__.Encode(marketVaultSignerNonceParam)
		if err != nil {
			return nil, errors.NewField("marketVaultSignerNonceParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "payer": Writable, Signer, Required
		// Only migrate_to_amm_wallet can migrate to cpswap pool
		// This signer must match the migrate_to_amm_wallet saved in global_config
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 1 "base_mint": Read-only, Non-signer, Required
		// The mint for the base token (token being sold)
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, false, false))
		// Account 2 "quote_mint": Read-only, Non-signer, Required
		// The mint for the quote token (token used to buy)
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 3 "openbook_program": Read-only, Non-signer, Required, Address: srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX
		accounts__.Append(solanago.NewAccountMeta(openbookProgramAccount, false, false))
		// Account 4 "market": Writable, Non-signer, Required
		// Account created and asigned to openbook_program but not been initialized
		accounts__.Append(solanago.NewAccountMeta(marketAccount, true, false))
		// Account 5 "request_queue": Writable, Non-signer, Required
		// Account created and asigned to openbook_program but not been initialized
		accounts__.Append(solanago.NewAccountMeta(requestQueueAccount, true, false))
		// Account 6 "event_queue": Writable, Non-signer, Required
		// Account created and asigned to openbook_program but not been initialized
		accounts__.Append(solanago.NewAccountMeta(eventQueueAccount, true, false))
		// Account 7 "bids": Writable, Non-signer, Required
		// Account created and asigned to openbook_program but not been initialized
		accounts__.Append(solanago.NewAccountMeta(bidsAccount, true, false))
		// Account 8 "asks": Writable, Non-signer, Required
		// Account created and asigned to openbook_program but not been initialized
		accounts__.Append(solanago.NewAccountMeta(asksAccount, true, false))
		// Account 9 "market_vault_signer": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(marketVaultSignerAccount, false, false))
		// Account 10 "market_base_vault": Writable, Non-signer, Required
		// Token account that holds the market's base tokens
		accounts__.Append(solanago.NewAccountMeta(marketBaseVaultAccount, true, false))
		// Account 11 "market_quote_vault": Writable, Non-signer, Required
		// Token account that holds the market's quote tokens
		accounts__.Append(solanago.NewAccountMeta(marketQuoteVaultAccount, true, false))
		// Account 12 "amm_program": Read-only, Non-signer, Required, Address: 675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8
		accounts__.Append(solanago.NewAccountMeta(ammProgramAccount, false, false))
		// Account 13 "amm_pool": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ammPoolAccount, true, false))
		// Account 14 "amm_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ammAuthorityAccount, false, false))
		// Account 15 "amm_open_orders": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ammOpenOrdersAccount, true, false))
		// Account 16 "amm_lp_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ammLpMintAccount, true, false))
		// Account 17 "amm_base_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ammBaseVaultAccount, true, false))
		// Account 18 "amm_quote_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ammQuoteVaultAccount, true, false))
		// Account 19 "amm_target_orders": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ammTargetOrdersAccount, true, false))
		// Account 20 "amm_config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ammConfigAccount, false, false))
		// Account 21 "amm_create_fee_destination": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(ammCreateFeeDestinationAccount, true, false))
		// Account 22 "authority": Writable, Non-signer, Required
		// PDA that acts as the authority for pool vault operations
		// Generated using AUTH_SEED
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, true, false))
		// Account 23 "pool_state": Writable, Non-signer, Required
		// Account that stores the pool's state and parameters
		// PDA generated using POOL_SEED and both token mints
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 24 "global_config": Read-only, Non-signer, Required
		// Global config account stores owner
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 25 "base_vault": Writable, Non-signer, Required
		// The pool's vault for base tokens
		// Will be fully drained during migration
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 26 "quote_vault": Writable, Non-signer, Required
		// The pool's vault for quote tokens
		// Will be fully drained during migration
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 27 "pool_lp_token": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolLpTokenAccount, true, false))
		// Account 28 "spl_token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL Token program for the base token
		// Must be the standard Token program
		accounts__.Append(solanago.NewAccountMeta(splTokenProgramAccount, false, false))
		// Account 29 "associated_token_program": Read-only, Non-signer, Required, Address: ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL
		// Program to create an ATA for receiving fee NFT
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 30 "system_program": Read-only, Non-signer, Required
		// Required for account creation
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 31 "rent_program": Read-only, Non-signer, Required, Address: SysvarRent111111111111111111111111111111111
		// Required for rent exempt calculations
		accounts__.Append(solanago.NewAccountMeta(rentProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "migrate_to_cpswap" instruction.
// # Arguments //  // * `ctx` - The context of accounts //
func NewMigrateToCpswapInstruction(
	payerAccount solanago.PublicKey,
	baseMintAccount solanago.PublicKey,
	quoteMintAccount solanago.PublicKey,
	platformConfigAccount solanago.PublicKey,
	cpswapProgramAccount solanago.PublicKey,
	cpswapPoolAccount solanago.PublicKey,
	cpswapAuthorityAccount solanago.PublicKey,
	cpswapLpMintAccount solanago.PublicKey,
	cpswapBaseVaultAccount solanago.PublicKey,
	cpswapQuoteVaultAccount solanago.PublicKey,
	cpswapConfigAccount solanago.PublicKey,
	cpswapCreatePoolFeeAccount solanago.PublicKey,
	cpswapObservationAccount solanago.PublicKey,
	lockProgramAccount solanago.PublicKey,
	lockAuthorityAccount solanago.PublicKey,
	lockLpVaultAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	poolLpTokenAccount solanago.PublicKey,
	baseTokenProgramAccount solanago.PublicKey,
	quoteTokenProgramAccount solanago.PublicKey,
	associatedTokenProgramAccount solanago.PublicKey,
	systemProgramAccount solanago.PublicKey,
	rentProgramAccount solanago.PublicKey,
	metadataProgramAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "payer": Writable, Signer, Required
		// Only migrate_to_cpswap_wallet can migrate to cpswap pool
		// This signer must match the migrate_to_cpswap_wallet saved in global_config
		accounts__.Append(solanago.NewAccountMeta(payerAccount, true, true))
		// Account 1 "base_mint": Read-only, Non-signer, Required
		// The mint for the base token (token being sold)
		accounts__.Append(solanago.NewAccountMeta(baseMintAccount, false, false))
		// Account 2 "quote_mint": Read-only, Non-signer, Required
		// The mint for the quote token (token used to buy)
		accounts__.Append(solanago.NewAccountMeta(quoteMintAccount, false, false))
		// Account 3 "platform_config": Read-only, Non-signer, Required
		// Platform configuration account containing platform-wide settings
		// Used to read platform fee rate
		accounts__.Append(solanago.NewAccountMeta(platformConfigAccount, false, false))
		// Account 4 "cpswap_program": Read-only, Non-signer, Required, Address: CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C
		accounts__.Append(solanago.NewAccountMeta(cpswapProgramAccount, false, false))
		// Account 5 "cpswap_pool": Writable, Non-signer, Required
		// PDA account:
		// seeds = [
		// b"pool",
		// cpswap_config.key().as_ref(),
		// token_0_mint.key().as_ref(),
		// token_1_mint.key().as_ref(),
		// ],
		// seeds::program = cpswap_program,
		//
		// Or random account: must be signed by cli
		accounts__.Append(solanago.NewAccountMeta(cpswapPoolAccount, true, false))
		// Account 6 "cpswap_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(cpswapAuthorityAccount, false, false))
		// Account 7 "cpswap_lp_mint": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(cpswapLpMintAccount, true, false))
		// Account 8 "cpswap_base_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(cpswapBaseVaultAccount, true, false))
		// Account 9 "cpswap_quote_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(cpswapQuoteVaultAccount, true, false))
		// Account 10 "cpswap_config": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(cpswapConfigAccount, false, false))
		// Account 11 "cpswap_create_pool_fee": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(cpswapCreatePoolFeeAccount, true, false))
		// Account 12 "cpswap_observation": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(cpswapObservationAccount, true, false))
		// Account 13 "lock_program": Read-only, Non-signer, Required, Address: LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE
		accounts__.Append(solanago.NewAccountMeta(lockProgramAccount, false, false))
		// Account 14 "lock_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lockAuthorityAccount, false, false))
		// Account 15 "lock_lp_vault": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(lockLpVaultAccount, true, false))
		// Account 16 "authority": Writable, Non-signer, Required
		// PDA that acts as the authority for pool vault operations
		// Generated using AUTH_SEED
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, true, false))
		// Account 17 "pool_state": Writable, Non-signer, Required
		// Account that stores the pool's state and parameters
		// PDA generated using POOL_SEED and both token mints
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 18 "global_config": Read-only, Non-signer, Required
		// Global config account stores owner
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 19 "base_vault": Writable, Non-signer, Required
		// The pool's vault for base tokens
		// Will be fully drained during migration
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 20 "quote_vault": Writable, Non-signer, Required
		// The pool's vault for quote tokens
		// Will be fully drained during migration
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 21 "pool_lp_token": Writable, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(poolLpTokenAccount, true, false))
		// Account 22 "base_token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL Token program for the base token
		// Must be the standard Token program
		accounts__.Append(solanago.NewAccountMeta(baseTokenProgramAccount, false, false))
		// Account 23 "quote_token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL Token program for the quote token
		accounts__.Append(solanago.NewAccountMeta(quoteTokenProgramAccount, false, false))
		// Account 24 "associated_token_program": Read-only, Non-signer, Required, Address: ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL
		// Program to create an ATA for receiving fee NFT
		accounts__.Append(solanago.NewAccountMeta(associatedTokenProgramAccount, false, false))
		// Account 25 "system_program": Read-only, Non-signer, Required
		// Required for account creation
		accounts__.Append(solanago.NewAccountMeta(systemProgramAccount, false, false))
		// Account 26 "rent_program": Read-only, Non-signer, Required, Address: SysvarRent111111111111111111111111111111111
		// Required for rent exempt calculations
		accounts__.Append(solanago.NewAccountMeta(rentProgramAccount, false, false))
		// Account 27 "metadata_program": Read-only, Non-signer, Required, Address: metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s
		// Program to create NFT metadata accunt
		accounts__.Append(solanago.NewAccountMeta(metadataProgramAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		nil,
	), nil
}

// Builds a "sell_exact_in" instruction.
// Use the given amount of base tokens to sell for quote tokens. // # Arguments //  // * `ctx` - The context of accounts // * `amount_in` - Amount of base token to sell // * `minimum_amount_out` - Minimum amount of quote token to receive (slippage protection) // * `share_fee_rate` - Fee rate for the share //
func NewSellExactInInstruction(
	// Params:
	amountInParam uint64,
	minimumAmountOutParam uint64,
	shareFeeRateParam uint64,

	// Accounts:
	payerAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	platformConfigAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	userQuoteTokenAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	baseTokenMintAccount solanago.PublicKey,
	quoteTokenMintAccount solanago.PublicKey,
	baseTokenProgramAccount solanago.PublicKey,
	quoteTokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_SellExactIn[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `amountInParam`:
		err = enc__.Encode(amountInParam)
		if err != nil {
			return nil, errors.NewField("amountInParam", err)
		}
		// Serialize `minimumAmountOutParam`:
		err = enc__.Encode(minimumAmountOutParam)
		if err != nil {
			return nil, errors.NewField("minimumAmountOutParam", err)
		}
		// Serialize `shareFeeRateParam`:
		err = enc__.Encode(shareFeeRateParam)
		if err != nil {
			return nil, errors.NewField("shareFeeRateParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "payer": Read-only, Signer, Required
		// The user performing the swap operation
		// Must sign the transaction and pay for fees
		accounts__.Append(solanago.NewAccountMeta(payerAccount, false, true))
		// Account 1 "authority": Read-only, Non-signer, Required
		// PDA that acts as the authority for pool vault operations
		// Generated using AUTH_SEED
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, false, false))
		// Account 2 "global_config": Read-only, Non-signer, Required
		// Global configuration account containing protocol-wide settings
		// Used to read protocol fee rates and curve type
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 3 "platform_config": Read-only, Non-signer, Required
		// Platform configuration account containing platform-wide settings
		// Used to read platform fee rate
		accounts__.Append(solanago.NewAccountMeta(platformConfigAccount, false, false))
		// Account 4 "pool_state": Writable, Non-signer, Required
		// The pool state account where the swap will be performed
		// Contains current pool parameters and balances
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 5 "user_base_token": Writable, Non-signer, Required
		// The user's token account for base tokens (tokens being bought)
		// Will receive the output tokens after the swap
		accounts__.Append(solanago.NewAccountMeta(userBaseTokenAccount, true, false))
		// Account 6 "user_quote_token": Writable, Non-signer, Required
		// The user's token account for quote tokens (tokens being sold)
		// Will be debited for the input amount
		accounts__.Append(solanago.NewAccountMeta(userQuoteTokenAccount, true, false))
		// Account 7 "base_vault": Writable, Non-signer, Required
		// The pool's vault for base tokens
		// Will be debited to send tokens to the user
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 8 "quote_vault": Writable, Non-signer, Required
		// The pool's vault for quote tokens
		// Will receive the input tokens from the user
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 9 "base_token_mint": Read-only, Non-signer, Required
		// The mint of the base token
		// Used for transfer fee calculations if applicable
		accounts__.Append(solanago.NewAccountMeta(baseTokenMintAccount, false, false))
		// Account 10 "quote_token_mint": Read-only, Non-signer, Required
		// The mint of the quote token
		accounts__.Append(solanago.NewAccountMeta(quoteTokenMintAccount, false, false))
		// Account 11 "base_token_program": Read-only, Non-signer, Required
		// SPL Token program for base token transfers
		accounts__.Append(solanago.NewAccountMeta(baseTokenProgramAccount, false, false))
		// Account 12 "quote_token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL Token program for quote token transfers
		accounts__.Append(solanago.NewAccountMeta(quoteTokenProgramAccount, false, false))
		// Account 13 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 14 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "sell_exact_out" instruction.
// Sell base tokens for the given amount of quote tokens. // # Arguments //  // * `ctx` - The context of accounts // * `amount_out` - Amount of quote token to receive // * `maximum_amount_in` - Maximum amount of base token to purchase (slippage protection) // * `share_fee_rate` - Fee rate for the share //
func NewSellExactOutInstruction(
	// Params:
	amountOutParam uint64,
	maximumAmountInParam uint64,
	shareFeeRateParam uint64,

	// Accounts:
	payerAccount solanago.PublicKey,
	authorityAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
	platformConfigAccount solanago.PublicKey,
	poolStateAccount solanago.PublicKey,
	userBaseTokenAccount solanago.PublicKey,
	userQuoteTokenAccount solanago.PublicKey,
	baseVaultAccount solanago.PublicKey,
	quoteVaultAccount solanago.PublicKey,
	baseTokenMintAccount solanago.PublicKey,
	quoteTokenMintAccount solanago.PublicKey,
	baseTokenProgramAccount solanago.PublicKey,
	quoteTokenProgramAccount solanago.PublicKey,
	eventAuthorityAccount solanago.PublicKey,
	programAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_SellExactOut[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `amountOutParam`:
		err = enc__.Encode(amountOutParam)
		if err != nil {
			return nil, errors.NewField("amountOutParam", err)
		}
		// Serialize `maximumAmountInParam`:
		err = enc__.Encode(maximumAmountInParam)
		if err != nil {
			return nil, errors.NewField("maximumAmountInParam", err)
		}
		// Serialize `shareFeeRateParam`:
		err = enc__.Encode(shareFeeRateParam)
		if err != nil {
			return nil, errors.NewField("shareFeeRateParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "payer": Read-only, Signer, Required
		// The user performing the swap operation
		// Must sign the transaction and pay for fees
		accounts__.Append(solanago.NewAccountMeta(payerAccount, false, true))
		// Account 1 "authority": Read-only, Non-signer, Required
		// PDA that acts as the authority for pool vault operations
		// Generated using AUTH_SEED
		accounts__.Append(solanago.NewAccountMeta(authorityAccount, false, false))
		// Account 2 "global_config": Read-only, Non-signer, Required
		// Global configuration account containing protocol-wide settings
		// Used to read protocol fee rates and curve type
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, false, false))
		// Account 3 "platform_config": Read-only, Non-signer, Required
		// Platform configuration account containing platform-wide settings
		// Used to read platform fee rate
		accounts__.Append(solanago.NewAccountMeta(platformConfigAccount, false, false))
		// Account 4 "pool_state": Writable, Non-signer, Required
		// The pool state account where the swap will be performed
		// Contains current pool parameters and balances
		accounts__.Append(solanago.NewAccountMeta(poolStateAccount, true, false))
		// Account 5 "user_base_token": Writable, Non-signer, Required
		// The user's token account for base tokens (tokens being bought)
		// Will receive the output tokens after the swap
		accounts__.Append(solanago.NewAccountMeta(userBaseTokenAccount, true, false))
		// Account 6 "user_quote_token": Writable, Non-signer, Required
		// The user's token account for quote tokens (tokens being sold)
		// Will be debited for the input amount
		accounts__.Append(solanago.NewAccountMeta(userQuoteTokenAccount, true, false))
		// Account 7 "base_vault": Writable, Non-signer, Required
		// The pool's vault for base tokens
		// Will be debited to send tokens to the user
		accounts__.Append(solanago.NewAccountMeta(baseVaultAccount, true, false))
		// Account 8 "quote_vault": Writable, Non-signer, Required
		// The pool's vault for quote tokens
		// Will receive the input tokens from the user
		accounts__.Append(solanago.NewAccountMeta(quoteVaultAccount, true, false))
		// Account 9 "base_token_mint": Read-only, Non-signer, Required
		// The mint of the base token
		// Used for transfer fee calculations if applicable
		accounts__.Append(solanago.NewAccountMeta(baseTokenMintAccount, false, false))
		// Account 10 "quote_token_mint": Read-only, Non-signer, Required
		// The mint of the quote token
		accounts__.Append(solanago.NewAccountMeta(quoteTokenMintAccount, false, false))
		// Account 11 "base_token_program": Read-only, Non-signer, Required
		// SPL Token program for base token transfers
		accounts__.Append(solanago.NewAccountMeta(baseTokenProgramAccount, false, false))
		// Account 12 "quote_token_program": Read-only, Non-signer, Required, Address: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
		// SPL Token program for quote token transfers
		accounts__.Append(solanago.NewAccountMeta(quoteTokenProgramAccount, false, false))
		// Account 13 "event_authority": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(eventAuthorityAccount, false, false))
		// Account 14 "program": Read-only, Non-signer, Required
		accounts__.Append(solanago.NewAccountMeta(programAccount, false, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "update_config" instruction.
// Updates configuration parameters // # Arguments //  // * `ctx` - The context of accounts // * `param` - Parameter to update: // - 0: Update trade_fee_rate // - 1: Update fee owner // * `value` - New value for the selected parameter //
func NewUpdateConfigInstruction(
	// Params:
	paramParam uint8,
	valueParam uint64,

	// Accounts:
	ownerAccount solanago.PublicKey,
	globalConfigAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_UpdateConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramParam`:
		err = enc__.Encode(paramParam)
		if err != nil {
			return nil, errors.NewField("paramParam", err)
		}
		// Serialize `valueParam`:
		err = enc__.Encode(valueParam)
		if err != nil {
			return nil, errors.NewField("valueParam", err)
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "owner": Read-only, Signer, Required, Address: GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ
		// The global config owner or admin
		accounts__.Append(solanago.NewAccountMeta(ownerAccount, false, true))
		// Account 1 "global_config": Writable, Non-signer, Required
		// Global config account to be changed
		accounts__.Append(solanago.NewAccountMeta(globalConfigAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}

// Builds a "update_platform_config" instruction.
// Update platform config // # Arguments //  // * `ctx` - The context of accounts // * `param` - Parameter to update //
func NewUpdatePlatformConfigInstruction(
	// Params:
	paramParam PlatformConfigParam,

	// Accounts:
	platformAdminAccount solanago.PublicKey,
	platformConfigAccount solanago.PublicKey,
) (solanago.Instruction, error) {
	buf__ := new(bytes.Buffer)
	enc__ := binary.NewBorshEncoder(buf__)

	// Encode the instruction discriminator.
	err := enc__.WriteBytes(Instruction_UpdatePlatformConfig[:], false)
	if err != nil {
		return nil, fmt.Errorf("failed to write instruction discriminator: %w", err)
	}
	{
		// Serialize `paramParam`:
		{
			err := EncodePlatformConfigParam(enc__, paramParam)
			if err != nil {
				return nil, errors.NewField("paramParam", err)
			}
		}
	}
	accounts__ := solanago.AccountMetaSlice{}

	// Add the accounts to the instruction.
	{
		// Account 0 "platform_admin": Read-only, Signer, Required
		// The account paying for the initialization costs
		accounts__.Append(solanago.NewAccountMeta(platformAdminAccount, false, true))
		// Account 1 "platform_config": Writable, Non-signer, Required
		// Platform config account to be changed
		accounts__.Append(solanago.NewAccountMeta(platformConfigAccount, true, false))
	}

	// Create the instruction.
	return solanago.NewInstruction(
		ProgramID,
		accounts__,
		buf__.Bytes(),
	), nil
}
