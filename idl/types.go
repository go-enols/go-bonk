// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.
// This file contains parsers for the types defined in the IDL.

package raydium_launchpad

import (
	"bytes"
	"fmt"
	errors "github.com/gagliardetto/anchor-go/errors"
	binary "github.com/gagliardetto/binary"
	solanago "github.com/gagliardetto/solana-go"
)

// Emitted when vesting token claimed by beneficiary
type ClaimVestedEvent struct {
	PoolState   solanago.PublicKey `json:"poolState"`
	Beneficiary solanago.PublicKey `json:"beneficiary"`
	ClaimAmount uint64             `json:"claimAmount"`
}

func (obj ClaimVestedEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolState`:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return errors.NewField("PoolState", err)
	}
	// Serialize `Beneficiary`:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return errors.NewField("Beneficiary", err)
	}
	// Serialize `ClaimAmount`:
	err = encoder.Encode(obj.ClaimAmount)
	if err != nil {
		return errors.NewField("ClaimAmount", err)
	}
	return nil
}

func (obj ClaimVestedEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ClaimVestedEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ClaimVestedEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return errors.NewField("PoolState", err)
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return errors.NewField("Beneficiary", err)
	}
	// Deserialize `ClaimAmount`:
	err = decoder.Decode(&obj.ClaimAmount)
	if err != nil {
		return errors.NewField("ClaimAmount", err)
	}
	return nil
}

func (obj *ClaimVestedEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ClaimVestedEvent: %w", err)
	}
	return nil
}

func UnmarshalClaimVestedEvent(buf []byte) (*ClaimVestedEvent, error) {
	obj := new(ClaimVestedEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type ConstantCurve struct {
	Supply                uint64 `json:"supply"`
	TotalBaseSell         uint64 `json:"totalBaseSell"`
	TotalQuoteFundRaising uint64 `json:"totalQuoteFundRaising"`
	MigrateType           uint8  `json:"migrateType"`
}

func (obj ConstantCurve) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Supply`:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return errors.NewField("Supply", err)
	}
	// Serialize `TotalBaseSell`:
	err = encoder.Encode(obj.TotalBaseSell)
	if err != nil {
		return errors.NewField("TotalBaseSell", err)
	}
	// Serialize `TotalQuoteFundRaising`:
	err = encoder.Encode(obj.TotalQuoteFundRaising)
	if err != nil {
		return errors.NewField("TotalQuoteFundRaising", err)
	}
	// Serialize `MigrateType`:
	err = encoder.Encode(obj.MigrateType)
	if err != nil {
		return errors.NewField("MigrateType", err)
	}
	return nil
}

func (obj ConstantCurve) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding ConstantCurve: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *ConstantCurve) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return errors.NewField("Supply", err)
	}
	// Deserialize `TotalBaseSell`:
	err = decoder.Decode(&obj.TotalBaseSell)
	if err != nil {
		return errors.NewField("TotalBaseSell", err)
	}
	// Deserialize `TotalQuoteFundRaising`:
	err = decoder.Decode(&obj.TotalQuoteFundRaising)
	if err != nil {
		return errors.NewField("TotalQuoteFundRaising", err)
	}
	// Deserialize `MigrateType`:
	err = decoder.Decode(&obj.MigrateType)
	if err != nil {
		return errors.NewField("MigrateType", err)
	}
	return nil
}

func (obj *ConstantCurve) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling ConstantCurve: %w", err)
	}
	return nil
}

func UnmarshalConstantCurve(buf []byte) (*ConstantCurve, error) {
	obj := new(ConstantCurve)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Emitted when vest_account created
type CreateVestingEvent struct {
	PoolState   solanago.PublicKey `json:"poolState"`
	Beneficiary solanago.PublicKey `json:"beneficiary"`
	ShareAmount uint64             `json:"shareAmount"`
}

func (obj CreateVestingEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolState`:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return errors.NewField("PoolState", err)
	}
	// Serialize `Beneficiary`:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return errors.NewField("Beneficiary", err)
	}
	// Serialize `ShareAmount`:
	err = encoder.Encode(obj.ShareAmount)
	if err != nil {
		return errors.NewField("ShareAmount", err)
	}
	return nil
}

func (obj CreateVestingEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CreateVestingEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CreateVestingEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return errors.NewField("PoolState", err)
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return errors.NewField("Beneficiary", err)
	}
	// Deserialize `ShareAmount`:
	err = decoder.Decode(&obj.ShareAmount)
	if err != nil {
		return errors.NewField("ShareAmount", err)
	}
	return nil
}

func (obj *CreateVestingEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CreateVestingEvent: %w", err)
	}
	return nil
}

func UnmarshalCreateVestingEvent(buf []byte) (*CreateVestingEvent, error) {
	obj := new(CreateVestingEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// The "isCurveParams" interface for the "CurveParams" complex enum.
type CurveParams interface {
	isCurveParams()
}

type curveParamsEnumContainer struct {
	Enum     binary.BorshEnum `bin:"enum"`
	Constant CurveParams_Constant
	Fixed    CurveParams_Fixed
	Linear   CurveParams_Linear
}

func DecodeCurveParams(decoder *binary.Decoder) (CurveParams, error) {
	{
		tmp := new(curveParamsEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing CurveParams: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return &tmp.Constant, nil
		case 1:
			return &tmp.Fixed, nil
		case 2:
			return &tmp.Linear, nil
		default:
			return nil, fmt.Errorf("CurveParams: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodeCurveParams(encoder *binary.Encoder, value CurveParams) error {
	{
		tmp := curveParamsEnumContainer{}
		switch realvalue := value.(type) {
		case *CurveParams_Constant:
			tmp.Enum = 0
			tmp.Constant = *realvalue
		case *CurveParams_Fixed:
			tmp.Enum = 1
			tmp.Fixed = *realvalue
		case *CurveParams_Linear:
			tmp.Enum = 2
			tmp.Linear = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

// Variant "Constant" of enum "CurveParams"
type CurveParams_Constant struct {
	Data ConstantCurve `json:"data"`
}

func (obj CurveParams_Constant) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Data`:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return errors.NewField("Data", err)
	}
	return nil
}

func (obj CurveParams_Constant) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CurveParams_Constant: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CurveParams_Constant) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return errors.NewField("Data", err)
	}
	return nil
}

func (obj *CurveParams_Constant) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CurveParams_Constant: %w", err)
	}
	return nil
}

func UnmarshalCurveParams_Constant(buf []byte) (*CurveParams_Constant, error) {
	obj := new(CurveParams_Constant)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *CurveParams_Constant) isCurveParams() {}

// Variant "Fixed" of enum "CurveParams"
type CurveParams_Fixed struct {
	Data FixedCurve `json:"data"`
}

func (obj CurveParams_Fixed) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Data`:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return errors.NewField("Data", err)
	}
	return nil
}

func (obj CurveParams_Fixed) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CurveParams_Fixed: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CurveParams_Fixed) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return errors.NewField("Data", err)
	}
	return nil
}

func (obj *CurveParams_Fixed) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CurveParams_Fixed: %w", err)
	}
	return nil
}

func UnmarshalCurveParams_Fixed(buf []byte) (*CurveParams_Fixed, error) {
	obj := new(CurveParams_Fixed)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *CurveParams_Fixed) isCurveParams() {}

// Variant "Linear" of enum "CurveParams"
type CurveParams_Linear struct {
	Data LinearCurve `json:"data"`
}

func (obj CurveParams_Linear) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Data`:
	err = encoder.Encode(obj.Data)
	if err != nil {
		return errors.NewField("Data", err)
	}
	return nil
}

func (obj CurveParams_Linear) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding CurveParams_Linear: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *CurveParams_Linear) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Data`:
	err = decoder.Decode(&obj.Data)
	if err != nil {
		return errors.NewField("Data", err)
	}
	return nil
}

func (obj *CurveParams_Linear) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling CurveParams_Linear: %w", err)
	}
	return nil
}

func UnmarshalCurveParams_Linear(buf []byte) (*CurveParams_Linear, error) {
	obj := new(CurveParams_Linear)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *CurveParams_Linear) isCurveParams() {}

type FixedCurve struct {
	Supply                uint64 `json:"supply"`
	TotalQuoteFundRaising uint64 `json:"totalQuoteFundRaising"`
	MigrateType           uint8  `json:"migrateType"`
}

func (obj FixedCurve) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Supply`:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return errors.NewField("Supply", err)
	}
	// Serialize `TotalQuoteFundRaising`:
	err = encoder.Encode(obj.TotalQuoteFundRaising)
	if err != nil {
		return errors.NewField("TotalQuoteFundRaising", err)
	}
	// Serialize `MigrateType`:
	err = encoder.Encode(obj.MigrateType)
	if err != nil {
		return errors.NewField("MigrateType", err)
	}
	return nil
}

func (obj FixedCurve) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding FixedCurve: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *FixedCurve) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return errors.NewField("Supply", err)
	}
	// Deserialize `TotalQuoteFundRaising`:
	err = decoder.Decode(&obj.TotalQuoteFundRaising)
	if err != nil {
		return errors.NewField("TotalQuoteFundRaising", err)
	}
	// Deserialize `MigrateType`:
	err = decoder.Decode(&obj.MigrateType)
	if err != nil {
		return errors.NewField("MigrateType", err)
	}
	return nil
}

func (obj *FixedCurve) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling FixedCurve: %w", err)
	}
	return nil
}

func UnmarshalFixedCurve(buf []byte) (*FixedCurve, error) {
	obj := new(FixedCurve)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Holds the current owner of the factory
type GlobalConfig struct {
	// Account update epoch
	Epoch uint64 `json:"epoch"`

	// 0: Constant Product Curve
	// 1: Fixed Price Curve
	// 2: Linear Price Curve
	CurveType uint8 `json:"curveType"`

	// Config index
	Index uint16 `json:"index"`

	// The fee of migrate to amm
	MigrateFee uint64 `json:"migrateFee"`

	// The trade fee rate, denominated in hundredths of a bip (10^-6)
	TradeFeeRate uint64 `json:"tradeFeeRate"`

	// The maximum share fee rate, denominated in hundredths of a bip (10^-6)
	MaxShareFeeRate uint64 `json:"maxShareFeeRate"`

	// The minimum base supply, the value without decimals
	MinBaseSupply uint64 `json:"minBaseSupply"`

	// The maximum lock rate, denominated in hundredths of a bip (10^-6)
	MaxLockRate uint64 `json:"maxLockRate"`

	// The minimum base sell rate, denominated in hundredths of a bip (10^-6)
	MinBaseSellRate uint64 `json:"minBaseSellRate"`

	// The minimum base migrate rate, denominated in hundredths of a bip (10^-6)
	MinBaseMigrateRate uint64 `json:"minBaseMigrateRate"`

	// The minimum quote fund raising, the value with decimals
	MinQuoteFundRaising uint64 `json:"minQuoteFundRaising"`

	// Mint information for quote token
	QuoteMint solanago.PublicKey `json:"quoteMint"`

	// Protocol Fee owner
	ProtocolFeeOwner solanago.PublicKey `json:"protocolFeeOwner"`

	// Migrate Fee owner
	MigrateFeeOwner solanago.PublicKey `json:"migrateFeeOwner"`

	// Migrate to amm control wallet
	MigrateToAmmWallet solanago.PublicKey `json:"migrateToAmmWallet"`

	// Migrate to cpswap wallet
	MigrateToCpswapWallet solanago.PublicKey `json:"migrateToCpswapWallet"`

	// padding for future updates
	Padding [16]uint64 `json:"padding"`
}

func (obj GlobalConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Epoch`:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return errors.NewField("Epoch", err)
	}
	// Serialize `CurveType`:
	err = encoder.Encode(obj.CurveType)
	if err != nil {
		return errors.NewField("CurveType", err)
	}
	// Serialize `Index`:
	err = encoder.Encode(obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Serialize `MigrateFee`:
	err = encoder.Encode(obj.MigrateFee)
	if err != nil {
		return errors.NewField("MigrateFee", err)
	}
	// Serialize `TradeFeeRate`:
	err = encoder.Encode(obj.TradeFeeRate)
	if err != nil {
		return errors.NewField("TradeFeeRate", err)
	}
	// Serialize `MaxShareFeeRate`:
	err = encoder.Encode(obj.MaxShareFeeRate)
	if err != nil {
		return errors.NewField("MaxShareFeeRate", err)
	}
	// Serialize `MinBaseSupply`:
	err = encoder.Encode(obj.MinBaseSupply)
	if err != nil {
		return errors.NewField("MinBaseSupply", err)
	}
	// Serialize `MaxLockRate`:
	err = encoder.Encode(obj.MaxLockRate)
	if err != nil {
		return errors.NewField("MaxLockRate", err)
	}
	// Serialize `MinBaseSellRate`:
	err = encoder.Encode(obj.MinBaseSellRate)
	if err != nil {
		return errors.NewField("MinBaseSellRate", err)
	}
	// Serialize `MinBaseMigrateRate`:
	err = encoder.Encode(obj.MinBaseMigrateRate)
	if err != nil {
		return errors.NewField("MinBaseMigrateRate", err)
	}
	// Serialize `MinQuoteFundRaising`:
	err = encoder.Encode(obj.MinQuoteFundRaising)
	if err != nil {
		return errors.NewField("MinQuoteFundRaising", err)
	}
	// Serialize `QuoteMint`:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return errors.NewField("QuoteMint", err)
	}
	// Serialize `ProtocolFeeOwner`:
	err = encoder.Encode(obj.ProtocolFeeOwner)
	if err != nil {
		return errors.NewField("ProtocolFeeOwner", err)
	}
	// Serialize `MigrateFeeOwner`:
	err = encoder.Encode(obj.MigrateFeeOwner)
	if err != nil {
		return errors.NewField("MigrateFeeOwner", err)
	}
	// Serialize `MigrateToAmmWallet`:
	err = encoder.Encode(obj.MigrateToAmmWallet)
	if err != nil {
		return errors.NewField("MigrateToAmmWallet", err)
	}
	// Serialize `MigrateToCpswapWallet`:
	err = encoder.Encode(obj.MigrateToCpswapWallet)
	if err != nil {
		return errors.NewField("MigrateToCpswapWallet", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj GlobalConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding GlobalConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *GlobalConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return errors.NewField("Epoch", err)
	}
	// Deserialize `CurveType`:
	err = decoder.Decode(&obj.CurveType)
	if err != nil {
		return errors.NewField("CurveType", err)
	}
	// Deserialize `Index`:
	err = decoder.Decode(&obj.Index)
	if err != nil {
		return errors.NewField("Index", err)
	}
	// Deserialize `MigrateFee`:
	err = decoder.Decode(&obj.MigrateFee)
	if err != nil {
		return errors.NewField("MigrateFee", err)
	}
	// Deserialize `TradeFeeRate`:
	err = decoder.Decode(&obj.TradeFeeRate)
	if err != nil {
		return errors.NewField("TradeFeeRate", err)
	}
	// Deserialize `MaxShareFeeRate`:
	err = decoder.Decode(&obj.MaxShareFeeRate)
	if err != nil {
		return errors.NewField("MaxShareFeeRate", err)
	}
	// Deserialize `MinBaseSupply`:
	err = decoder.Decode(&obj.MinBaseSupply)
	if err != nil {
		return errors.NewField("MinBaseSupply", err)
	}
	// Deserialize `MaxLockRate`:
	err = decoder.Decode(&obj.MaxLockRate)
	if err != nil {
		return errors.NewField("MaxLockRate", err)
	}
	// Deserialize `MinBaseSellRate`:
	err = decoder.Decode(&obj.MinBaseSellRate)
	if err != nil {
		return errors.NewField("MinBaseSellRate", err)
	}
	// Deserialize `MinBaseMigrateRate`:
	err = decoder.Decode(&obj.MinBaseMigrateRate)
	if err != nil {
		return errors.NewField("MinBaseMigrateRate", err)
	}
	// Deserialize `MinQuoteFundRaising`:
	err = decoder.Decode(&obj.MinQuoteFundRaising)
	if err != nil {
		return errors.NewField("MinQuoteFundRaising", err)
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return errors.NewField("QuoteMint", err)
	}
	// Deserialize `ProtocolFeeOwner`:
	err = decoder.Decode(&obj.ProtocolFeeOwner)
	if err != nil {
		return errors.NewField("ProtocolFeeOwner", err)
	}
	// Deserialize `MigrateFeeOwner`:
	err = decoder.Decode(&obj.MigrateFeeOwner)
	if err != nil {
		return errors.NewField("MigrateFeeOwner", err)
	}
	// Deserialize `MigrateToAmmWallet`:
	err = decoder.Decode(&obj.MigrateToAmmWallet)
	if err != nil {
		return errors.NewField("MigrateToAmmWallet", err)
	}
	// Deserialize `MigrateToCpswapWallet`:
	err = decoder.Decode(&obj.MigrateToCpswapWallet)
	if err != nil {
		return errors.NewField("MigrateToCpswapWallet", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *GlobalConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling GlobalConfig: %w", err)
	}
	return nil
}

func UnmarshalGlobalConfig(buf []byte) (*GlobalConfig, error) {
	obj := new(GlobalConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type LinearCurve struct {
	Supply                uint64 `json:"supply"`
	TotalQuoteFundRaising uint64 `json:"totalQuoteFundRaising"`
	MigrateType           uint8  `json:"migrateType"`
}

func (obj LinearCurve) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Supply`:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return errors.NewField("Supply", err)
	}
	// Serialize `TotalQuoteFundRaising`:
	err = encoder.Encode(obj.TotalQuoteFundRaising)
	if err != nil {
		return errors.NewField("TotalQuoteFundRaising", err)
	}
	// Serialize `MigrateType`:
	err = encoder.Encode(obj.MigrateType)
	if err != nil {
		return errors.NewField("MigrateType", err)
	}
	return nil
}

func (obj LinearCurve) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding LinearCurve: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *LinearCurve) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return errors.NewField("Supply", err)
	}
	// Deserialize `TotalQuoteFundRaising`:
	err = decoder.Decode(&obj.TotalQuoteFundRaising)
	if err != nil {
		return errors.NewField("TotalQuoteFundRaising", err)
	}
	// Deserialize `MigrateType`:
	err = decoder.Decode(&obj.MigrateType)
	if err != nil {
		return errors.NewField("MigrateType", err)
	}
	return nil
}

func (obj *LinearCurve) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling LinearCurve: %w", err)
	}
	return nil
}

func UnmarshalLinearCurve(buf []byte) (*LinearCurve, error) {
	obj := new(LinearCurve)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Represents the parameters for initializing a platform config account(Only support MigrateType::CPSWAP)
// # Fields
// * `platform_scale` - Scale of the platform liquidity quantity rights will be converted into NFT
// * `creator_scale` - Scale of the token creator liquidity quantity rights will be converted into NFT
// * `burn_scale` - Scale of liquidity directly to burn
//
// * platform_scale + creator_scale + burn_scale = RATE_DENOMINATOR_VALUE
type MigrateNftInfo struct {
	PlatformScale uint64 `json:"platformScale"`
	CreatorScale  uint64 `json:"creatorScale"`
	BurnScale     uint64 `json:"burnScale"`
}

func (obj MigrateNftInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PlatformScale`:
	err = encoder.Encode(obj.PlatformScale)
	if err != nil {
		return errors.NewField("PlatformScale", err)
	}
	// Serialize `CreatorScale`:
	err = encoder.Encode(obj.CreatorScale)
	if err != nil {
		return errors.NewField("CreatorScale", err)
	}
	// Serialize `BurnScale`:
	err = encoder.Encode(obj.BurnScale)
	if err != nil {
		return errors.NewField("BurnScale", err)
	}
	return nil
}

func (obj MigrateNftInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MigrateNftInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MigrateNftInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PlatformScale`:
	err = decoder.Decode(&obj.PlatformScale)
	if err != nil {
		return errors.NewField("PlatformScale", err)
	}
	// Deserialize `CreatorScale`:
	err = decoder.Decode(&obj.CreatorScale)
	if err != nil {
		return errors.NewField("CreatorScale", err)
	}
	// Deserialize `BurnScale`:
	err = decoder.Decode(&obj.BurnScale)
	if err != nil {
		return errors.NewField("BurnScale", err)
	}
	return nil
}

func (obj *MigrateNftInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MigrateNftInfo: %w", err)
	}
	return nil
}

func UnmarshalMigrateNftInfo(buf []byte) (*MigrateNftInfo, error) {
	obj := new(MigrateNftInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Represents the parameters for initializing a new token mint
// # Fields
// * `decimals` - Number of decimal places for the token
// * `name` - Name of the token
// * `symbol` - Symbol/ticker of the token
// * `uri` - URI pointing to token metadata
type MintParams struct {
	Decimals uint8  `json:"decimals"`
	Name     string `json:"name"`
	Symbol   string `json:"symbol"`
	Uri      string `json:"uri"`
}

func (obj MintParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Decimals`:
	err = encoder.Encode(obj.Decimals)
	if err != nil {
		return errors.NewField("Decimals", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Symbol`:
	err = encoder.Encode(obj.Symbol)
	if err != nil {
		return errors.NewField("Symbol", err)
	}
	// Serialize `Uri`:
	err = encoder.Encode(obj.Uri)
	if err != nil {
		return errors.NewField("Uri", err)
	}
	return nil
}

func (obj MintParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding MintParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *MintParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Decimals`:
	err = decoder.Decode(&obj.Decimals)
	if err != nil {
		return errors.NewField("Decimals", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Symbol`:
	err = decoder.Decode(&obj.Symbol)
	if err != nil {
		return errors.NewField("Symbol", err)
	}
	// Deserialize `Uri`:
	err = decoder.Decode(&obj.Uri)
	if err != nil {
		return errors.NewField("Uri", err)
	}
	return nil
}

func (obj *MintParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling MintParams: %w", err)
	}
	return nil
}

func UnmarshalMintParams(buf []byte) (*MintParams, error) {
	obj := new(MintParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type PlatformConfig struct {
	// The epoch for update interval
	Epoch uint64 `json:"epoch"`

	// The platform fee wallet
	PlatformFeeWallet solanago.PublicKey `json:"platformFeeWallet"`

	// The platform nft wallet to receive the platform NFT after migration if platform_scale is not 0(Only support MigrateType::CPSWAP)
	PlatformNftWallet solanago.PublicKey `json:"platformNftWallet"`

	// Scale of the platform liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP)
	PlatformScale uint64 `json:"platformScale"`

	// Scale of the token creator liquidity quantity rights will be converted into NFT(Only support MigrateType::CPSWAP)
	CreatorScale uint64 `json:"creatorScale"`

	// Scale of liquidity directly to burn
	BurnScale uint64 `json:"burnScale"`

	// The platform fee rate
	FeeRate uint64 `json:"feeRate"`

	// The platform name
	Name [64]uint8 `json:"name"`

	// The platform website
	Web [256]uint8 `json:"web"`

	// The platform img link
	Img [256]uint8 `json:"img"`

	// padding for future updates
	Padding [256]uint8 `json:"padding"`
}

func (obj PlatformConfig) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Epoch`:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return errors.NewField("Epoch", err)
	}
	// Serialize `PlatformFeeWallet`:
	err = encoder.Encode(obj.PlatformFeeWallet)
	if err != nil {
		return errors.NewField("PlatformFeeWallet", err)
	}
	// Serialize `PlatformNftWallet`:
	err = encoder.Encode(obj.PlatformNftWallet)
	if err != nil {
		return errors.NewField("PlatformNftWallet", err)
	}
	// Serialize `PlatformScale`:
	err = encoder.Encode(obj.PlatformScale)
	if err != nil {
		return errors.NewField("PlatformScale", err)
	}
	// Serialize `CreatorScale`:
	err = encoder.Encode(obj.CreatorScale)
	if err != nil {
		return errors.NewField("CreatorScale", err)
	}
	// Serialize `BurnScale`:
	err = encoder.Encode(obj.BurnScale)
	if err != nil {
		return errors.NewField("BurnScale", err)
	}
	// Serialize `FeeRate`:
	err = encoder.Encode(obj.FeeRate)
	if err != nil {
		return errors.NewField("FeeRate", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Web`:
	err = encoder.Encode(obj.Web)
	if err != nil {
		return errors.NewField("Web", err)
	}
	// Serialize `Img`:
	err = encoder.Encode(obj.Img)
	if err != nil {
		return errors.NewField("Img", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj PlatformConfig) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PlatformConfig: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PlatformConfig) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return errors.NewField("Epoch", err)
	}
	// Deserialize `PlatformFeeWallet`:
	err = decoder.Decode(&obj.PlatformFeeWallet)
	if err != nil {
		return errors.NewField("PlatformFeeWallet", err)
	}
	// Deserialize `PlatformNftWallet`:
	err = decoder.Decode(&obj.PlatformNftWallet)
	if err != nil {
		return errors.NewField("PlatformNftWallet", err)
	}
	// Deserialize `PlatformScale`:
	err = decoder.Decode(&obj.PlatformScale)
	if err != nil {
		return errors.NewField("PlatformScale", err)
	}
	// Deserialize `CreatorScale`:
	err = decoder.Decode(&obj.CreatorScale)
	if err != nil {
		return errors.NewField("CreatorScale", err)
	}
	// Deserialize `BurnScale`:
	err = decoder.Decode(&obj.BurnScale)
	if err != nil {
		return errors.NewField("BurnScale", err)
	}
	// Deserialize `FeeRate`:
	err = decoder.Decode(&obj.FeeRate)
	if err != nil {
		return errors.NewField("FeeRate", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Web`:
	err = decoder.Decode(&obj.Web)
	if err != nil {
		return errors.NewField("Web", err)
	}
	// Deserialize `Img`:
	err = decoder.Decode(&obj.Img)
	if err != nil {
		return errors.NewField("Img", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *PlatformConfig) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PlatformConfig: %w", err)
	}
	return nil
}

func UnmarshalPlatformConfig(buf []byte) (*PlatformConfig, error) {
	obj := new(PlatformConfig)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// The "isPlatformConfigParam" interface for the "PlatformConfigParam" complex enum.
type PlatformConfigParam interface {
	isPlatformConfigParam()
}

type platformConfigParamEnumContainer struct {
	Enum           binary.BorshEnum `bin:"enum"`
	FeeWallet      PlatformConfigParam_FeeWallet
	NftWallet      PlatformConfigParam_NftWallet
	MigrateNftInfo PlatformConfigParam_MigrateNftInfo
	FeeRate        PlatformConfigParam_FeeRate
	Name           PlatformConfigParam_Name
	Web            PlatformConfigParam_Web
	Img            PlatformConfigParam_Img
}

func DecodePlatformConfigParam(decoder *binary.Decoder) (PlatformConfigParam, error) {
	{
		tmp := new(platformConfigParamEnumContainer)
		err := decoder.Decode(tmp)
		if err != nil {
			return nil, fmt.Errorf("failed parsing PlatformConfigParam: %w", err)
		}
		switch tmp.Enum {
		case 0:
			return &tmp.FeeWallet, nil
		case 1:
			return &tmp.NftWallet, nil
		case 2:
			return &tmp.MigrateNftInfo, nil
		case 3:
			return &tmp.FeeRate, nil
		case 4:
			return &tmp.Name, nil
		case 5:
			return &tmp.Web, nil
		case 6:
			return &tmp.Img, nil
		default:
			return nil, fmt.Errorf("PlatformConfigParam: unknown enum index: %v", tmp.Enum)
		}
	}
}

func EncodePlatformConfigParam(encoder *binary.Encoder, value PlatformConfigParam) error {
	{
		tmp := platformConfigParamEnumContainer{}
		switch realvalue := value.(type) {
		case *PlatformConfigParam_FeeWallet:
			tmp.Enum = 0
			tmp.FeeWallet = *realvalue
		case *PlatformConfigParam_NftWallet:
			tmp.Enum = 1
			tmp.NftWallet = *realvalue
		case *PlatformConfigParam_MigrateNftInfo:
			tmp.Enum = 2
			tmp.MigrateNftInfo = *realvalue
		case *PlatformConfigParam_FeeRate:
			tmp.Enum = 3
			tmp.FeeRate = *realvalue
		case *PlatformConfigParam_Name:
			tmp.Enum = 4
			tmp.Name = *realvalue
		case *PlatformConfigParam_Web:
			tmp.Enum = 5
			tmp.Web = *realvalue
		case *PlatformConfigParam_Img:
			tmp.Enum = 6
			tmp.Img = *realvalue
		}
		return encoder.Encode(tmp)
	}
}

// Variant "FeeWallet" of enum "PlatformConfigParam"
type PlatformConfigParam_FeeWallet struct {
	V0 solanago.PublicKey `json:"v0"`
}

func (obj PlatformConfigParam_FeeWallet) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj PlatformConfigParam_FeeWallet) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PlatformConfigParam_FeeWallet: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PlatformConfigParam_FeeWallet) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *PlatformConfigParam_FeeWallet) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PlatformConfigParam_FeeWallet: %w", err)
	}
	return nil
}

func UnmarshalPlatformConfigParam_FeeWallet(buf []byte) (*PlatformConfigParam_FeeWallet, error) {
	obj := new(PlatformConfigParam_FeeWallet)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *PlatformConfigParam_FeeWallet) isPlatformConfigParam() {}

// Variant "NFTWallet" of enum "PlatformConfigParam"
type PlatformConfigParam_NftWallet struct {
	V0 solanago.PublicKey `json:"v0"`
}

func (obj PlatformConfigParam_NftWallet) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj PlatformConfigParam_NftWallet) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PlatformConfigParam_NftWallet: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PlatformConfigParam_NftWallet) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *PlatformConfigParam_NftWallet) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PlatformConfigParam_NftWallet: %w", err)
	}
	return nil
}

func UnmarshalPlatformConfigParam_NftWallet(buf []byte) (*PlatformConfigParam_NftWallet, error) {
	obj := new(PlatformConfigParam_NftWallet)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *PlatformConfigParam_NftWallet) isPlatformConfigParam() {}

// Variant "MigrateNftInfo" of enum "PlatformConfigParam"
type PlatformConfigParam_MigrateNftInfo struct {
	V0 MigrateNftInfo `json:"v0"`
}

func (obj PlatformConfigParam_MigrateNftInfo) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj PlatformConfigParam_MigrateNftInfo) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PlatformConfigParam_MigrateNftInfo: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PlatformConfigParam_MigrateNftInfo) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *PlatformConfigParam_MigrateNftInfo) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PlatformConfigParam_MigrateNftInfo: %w", err)
	}
	return nil
}

func UnmarshalPlatformConfigParam_MigrateNftInfo(buf []byte) (*PlatformConfigParam_MigrateNftInfo, error) {
	obj := new(PlatformConfigParam_MigrateNftInfo)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *PlatformConfigParam_MigrateNftInfo) isPlatformConfigParam() {}

// Variant "FeeRate" of enum "PlatformConfigParam"
type PlatformConfigParam_FeeRate struct {
	V0 uint64 `json:"v0"`
}

func (obj PlatformConfigParam_FeeRate) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj PlatformConfigParam_FeeRate) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PlatformConfigParam_FeeRate: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PlatformConfigParam_FeeRate) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *PlatformConfigParam_FeeRate) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PlatformConfigParam_FeeRate: %w", err)
	}
	return nil
}

func UnmarshalPlatformConfigParam_FeeRate(buf []byte) (*PlatformConfigParam_FeeRate, error) {
	obj := new(PlatformConfigParam_FeeRate)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *PlatformConfigParam_FeeRate) isPlatformConfigParam() {}

// Variant "Name" of enum "PlatformConfigParam"
type PlatformConfigParam_Name struct {
	V0 string `json:"v0"`
}

func (obj PlatformConfigParam_Name) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj PlatformConfigParam_Name) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PlatformConfigParam_Name: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PlatformConfigParam_Name) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *PlatformConfigParam_Name) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PlatformConfigParam_Name: %w", err)
	}
	return nil
}

func UnmarshalPlatformConfigParam_Name(buf []byte) (*PlatformConfigParam_Name, error) {
	obj := new(PlatformConfigParam_Name)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *PlatformConfigParam_Name) isPlatformConfigParam() {}

// Variant "Web" of enum "PlatformConfigParam"
type PlatformConfigParam_Web struct {
	V0 string `json:"v0"`
}

func (obj PlatformConfigParam_Web) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj PlatformConfigParam_Web) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PlatformConfigParam_Web: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PlatformConfigParam_Web) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *PlatformConfigParam_Web) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PlatformConfigParam_Web: %w", err)
	}
	return nil
}

func UnmarshalPlatformConfigParam_Web(buf []byte) (*PlatformConfigParam_Web, error) {
	obj := new(PlatformConfigParam_Web)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *PlatformConfigParam_Web) isPlatformConfigParam() {}

// Variant "Img" of enum "PlatformConfigParam"
type PlatformConfigParam_Img struct {
	V0 string `json:"v0"`
}

func (obj PlatformConfigParam_Img) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `V0`:
	err = encoder.Encode(obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj PlatformConfigParam_Img) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PlatformConfigParam_Img: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PlatformConfigParam_Img) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `V0`:
	err = decoder.Decode(&obj.V0)
	if err != nil {
		return errors.NewField("V0", err)
	}
	return nil
}

func (obj *PlatformConfigParam_Img) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PlatformConfigParam_Img: %w", err)
	}
	return nil
}

func UnmarshalPlatformConfigParam_Img(buf []byte) (*PlatformConfigParam_Img, error) {
	obj := new(PlatformConfigParam_Img)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

func (_ *PlatformConfigParam_Img) isPlatformConfigParam() {}

// Represents the parameters for initializing a platform config account
// # Fields
// * `migrate_nft_info` - The platform configures liquidity info during migration(Only support MigrateType::CPSWAP)
// * `fee_rate` - Fee rate of the platform
// * `name` - Name of the platform
// * `web` - Website of the platform
// * `img` - Image link of the platform
type PlatformParams struct {
	MigrateNftInfo MigrateNftInfo `json:"migrateNftInfo"`
	FeeRate        uint64         `json:"feeRate"`
	Name           string         `json:"name"`
	Web            string         `json:"web"`
	Img            string         `json:"img"`
}

func (obj PlatformParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `MigrateNftInfo`:
	err = encoder.Encode(obj.MigrateNftInfo)
	if err != nil {
		return errors.NewField("MigrateNftInfo", err)
	}
	// Serialize `FeeRate`:
	err = encoder.Encode(obj.FeeRate)
	if err != nil {
		return errors.NewField("FeeRate", err)
	}
	// Serialize `Name`:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Serialize `Web`:
	err = encoder.Encode(obj.Web)
	if err != nil {
		return errors.NewField("Web", err)
	}
	// Serialize `Img`:
	err = encoder.Encode(obj.Img)
	if err != nil {
		return errors.NewField("Img", err)
	}
	return nil
}

func (obj PlatformParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PlatformParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PlatformParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `MigrateNftInfo`:
	err = decoder.Decode(&obj.MigrateNftInfo)
	if err != nil {
		return errors.NewField("MigrateNftInfo", err)
	}
	// Deserialize `FeeRate`:
	err = decoder.Decode(&obj.FeeRate)
	if err != nil {
		return errors.NewField("FeeRate", err)
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return errors.NewField("Name", err)
	}
	// Deserialize `Web`:
	err = decoder.Decode(&obj.Web)
	if err != nil {
		return errors.NewField("Web", err)
	}
	// Deserialize `Img`:
	err = decoder.Decode(&obj.Img)
	if err != nil {
		return errors.NewField("Img", err)
	}
	return nil
}

func (obj *PlatformParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PlatformParams: %w", err)
	}
	return nil
}

func UnmarshalPlatformParams(buf []byte) (*PlatformParams, error) {
	obj := new(PlatformParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Emitted when pool created
type PoolCreateEvent struct {
	PoolState     solanago.PublicKey `json:"poolState"`
	Creator       solanago.PublicKey `json:"creator"`
	Config        solanago.PublicKey `json:"config"`
	BaseMintParam MintParams         `json:"baseMintParam"`
	CurveParam    CurveParams        `json:"curveParam"`
	VestingParam  VestingParams      `json:"vestingParam"`
}

func (obj PoolCreateEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolState`:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return errors.NewField("PoolState", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `Config`:
	err = encoder.Encode(obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Serialize `BaseMintParam`:
	err = encoder.Encode(obj.BaseMintParam)
	if err != nil {
		return errors.NewField("BaseMintParam", err)
	}
	// Serialize `CurveParam`:
	{
		err := EncodeCurveParams(encoder, obj.CurveParam)
		if err != nil {
			return errors.NewField("CurveParam", err)
		}
	}
	// Serialize `VestingParam`:
	err = encoder.Encode(obj.VestingParam)
	if err != nil {
		return errors.NewField("VestingParam", err)
	}
	return nil
}

func (obj PoolCreateEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolCreateEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolCreateEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return errors.NewField("PoolState", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `Config`:
	err = decoder.Decode(&obj.Config)
	if err != nil {
		return errors.NewField("Config", err)
	}
	// Deserialize `BaseMintParam`:
	err = decoder.Decode(&obj.BaseMintParam)
	if err != nil {
		return errors.NewField("BaseMintParam", err)
	}
	// Deserialize `CurveParam`:
	{
		var err error
		obj.CurveParam, err = DecodeCurveParams(decoder)
		if err != nil {
			return err
		}
	}
	// Deserialize `VestingParam`:
	err = decoder.Decode(&obj.VestingParam)
	if err != nil {
		return errors.NewField("VestingParam", err)
	}
	return nil
}

func (obj *PoolCreateEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolCreateEvent: %w", err)
	}
	return nil
}

func UnmarshalPoolCreateEvent(buf []byte) (*PoolCreateEvent, error) {
	obj := new(PoolCreateEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Represents the state of a trading pool in the protocol
// Stores all essential information about pool balances, fees, and configuration
type PoolState struct {
	// Account update epoch
	Epoch uint64 `json:"epoch"`

	// Bump seed used for PDA address derivation
	AuthBump uint8 `json:"authBump"`

	// Current status of the pool
	// * 0: Pool is funding
	// * 1: Pool funding is end, waiting for migration
	// * 2: Pool migration is done
	Status uint8 `json:"status"`

	// Decimals of the pool base token
	BaseDecimals uint8 `json:"baseDecimals"`

	// Decimals of the pool quote token
	QuoteDecimals uint8 `json:"quoteDecimals"`

	// Migrate to AMM or CpSwap
	MigrateType uint8 `json:"migrateType"`

	// Supply of the pool base token
	Supply uint64 `json:"supply"`

	// Total sell amount of the base token
	TotalBaseSell uint64 `json:"totalBaseSell"`

	// For different curves, virtual_base and virtual_quote have different meanings
	// For constant product curve, virtual_base and virtual_quote are virtual liquidity, virtual_quote/virtual_base is the initial price
	// For linear price curve, virtual_base is the price slope parameter a, virtual_quote has no effect
	// For fixed price curve, virtual_quote/virtual_base is the initial price
	VirtualBase  uint64 `json:"virtualBase"`
	VirtualQuote uint64 `json:"virtualQuote"`

	// Actual base token amount in the pool
	// Represents the real tokens available for trading
	RealBase uint64 `json:"realBase"`

	// Actual quote token amount in the pool
	// Represents the real tokens available for trading
	RealQuote uint64 `json:"realQuote"`

	// The total quote fund raising of the pool
	TotalQuoteFundRaising uint64 `json:"totalQuoteFundRaising"`

	// Accumulated trading fees in quote tokens
	// Can be collected by the protocol fee owner
	QuoteProtocolFee uint64 `json:"quoteProtocolFee"`

	// Accumulated platform fees in quote tokens
	// Can be collected by the platform wallet stored in platform config
	PlatformFee uint64 `json:"platformFee"`

	// The fee of migrate to amm
	MigrateFee uint64 `json:"migrateFee"`

	// Vesting schedule for the base token
	VestingSchedule VestingSchedule `json:"vestingSchedule"`

	// Public key of the global configuration account
	// Contains protocol-wide settings this pool adheres to
	GlobalConfig solanago.PublicKey `json:"globalConfig"`

	// Public key of the platform configuration account
	// Contains platform-wide settings this pool adheres to
	PlatformConfig solanago.PublicKey `json:"platformConfig"`

	// Public key of the base mint address
	BaseMint solanago.PublicKey `json:"baseMint"`

	// Public key of the quote mint address
	QuoteMint solanago.PublicKey `json:"quoteMint"`

	// Public key of the base token vault
	// Holds the actual base tokens owned by the pool
	BaseVault solanago.PublicKey `json:"baseVault"`

	// Public key of the quote token vault
	// Holds the actual quote tokens owned by the pool
	QuoteVault solanago.PublicKey `json:"quoteVault"`

	// The creator of base token
	Creator solanago.PublicKey `json:"creator"`

	// padding for future updates
	Padding [8]uint64 `json:"padding"`
}

func (obj PoolState) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Epoch`:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return errors.NewField("Epoch", err)
	}
	// Serialize `AuthBump`:
	err = encoder.Encode(obj.AuthBump)
	if err != nil {
		return errors.NewField("AuthBump", err)
	}
	// Serialize `Status`:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Serialize `BaseDecimals`:
	err = encoder.Encode(obj.BaseDecimals)
	if err != nil {
		return errors.NewField("BaseDecimals", err)
	}
	// Serialize `QuoteDecimals`:
	err = encoder.Encode(obj.QuoteDecimals)
	if err != nil {
		return errors.NewField("QuoteDecimals", err)
	}
	// Serialize `MigrateType`:
	err = encoder.Encode(obj.MigrateType)
	if err != nil {
		return errors.NewField("MigrateType", err)
	}
	// Serialize `Supply`:
	err = encoder.Encode(obj.Supply)
	if err != nil {
		return errors.NewField("Supply", err)
	}
	// Serialize `TotalBaseSell`:
	err = encoder.Encode(obj.TotalBaseSell)
	if err != nil {
		return errors.NewField("TotalBaseSell", err)
	}
	// Serialize `VirtualBase`:
	err = encoder.Encode(obj.VirtualBase)
	if err != nil {
		return errors.NewField("VirtualBase", err)
	}
	// Serialize `VirtualQuote`:
	err = encoder.Encode(obj.VirtualQuote)
	if err != nil {
		return errors.NewField("VirtualQuote", err)
	}
	// Serialize `RealBase`:
	err = encoder.Encode(obj.RealBase)
	if err != nil {
		return errors.NewField("RealBase", err)
	}
	// Serialize `RealQuote`:
	err = encoder.Encode(obj.RealQuote)
	if err != nil {
		return errors.NewField("RealQuote", err)
	}
	// Serialize `TotalQuoteFundRaising`:
	err = encoder.Encode(obj.TotalQuoteFundRaising)
	if err != nil {
		return errors.NewField("TotalQuoteFundRaising", err)
	}
	// Serialize `QuoteProtocolFee`:
	err = encoder.Encode(obj.QuoteProtocolFee)
	if err != nil {
		return errors.NewField("QuoteProtocolFee", err)
	}
	// Serialize `PlatformFee`:
	err = encoder.Encode(obj.PlatformFee)
	if err != nil {
		return errors.NewField("PlatformFee", err)
	}
	// Serialize `MigrateFee`:
	err = encoder.Encode(obj.MigrateFee)
	if err != nil {
		return errors.NewField("MigrateFee", err)
	}
	// Serialize `VestingSchedule`:
	err = encoder.Encode(obj.VestingSchedule)
	if err != nil {
		return errors.NewField("VestingSchedule", err)
	}
	// Serialize `GlobalConfig`:
	err = encoder.Encode(obj.GlobalConfig)
	if err != nil {
		return errors.NewField("GlobalConfig", err)
	}
	// Serialize `PlatformConfig`:
	err = encoder.Encode(obj.PlatformConfig)
	if err != nil {
		return errors.NewField("PlatformConfig", err)
	}
	// Serialize `BaseMint`:
	err = encoder.Encode(obj.BaseMint)
	if err != nil {
		return errors.NewField("BaseMint", err)
	}
	// Serialize `QuoteMint`:
	err = encoder.Encode(obj.QuoteMint)
	if err != nil {
		return errors.NewField("QuoteMint", err)
	}
	// Serialize `BaseVault`:
	err = encoder.Encode(obj.BaseVault)
	if err != nil {
		return errors.NewField("BaseVault", err)
	}
	// Serialize `QuoteVault`:
	err = encoder.Encode(obj.QuoteVault)
	if err != nil {
		return errors.NewField("QuoteVault", err)
	}
	// Serialize `Creator`:
	err = encoder.Encode(obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj PoolState) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding PoolState: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *PoolState) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return errors.NewField("Epoch", err)
	}
	// Deserialize `AuthBump`:
	err = decoder.Decode(&obj.AuthBump)
	if err != nil {
		return errors.NewField("AuthBump", err)
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return errors.NewField("Status", err)
	}
	// Deserialize `BaseDecimals`:
	err = decoder.Decode(&obj.BaseDecimals)
	if err != nil {
		return errors.NewField("BaseDecimals", err)
	}
	// Deserialize `QuoteDecimals`:
	err = decoder.Decode(&obj.QuoteDecimals)
	if err != nil {
		return errors.NewField("QuoteDecimals", err)
	}
	// Deserialize `MigrateType`:
	err = decoder.Decode(&obj.MigrateType)
	if err != nil {
		return errors.NewField("MigrateType", err)
	}
	// Deserialize `Supply`:
	err = decoder.Decode(&obj.Supply)
	if err != nil {
		return errors.NewField("Supply", err)
	}
	// Deserialize `TotalBaseSell`:
	err = decoder.Decode(&obj.TotalBaseSell)
	if err != nil {
		return errors.NewField("TotalBaseSell", err)
	}
	// Deserialize `VirtualBase`:
	err = decoder.Decode(&obj.VirtualBase)
	if err != nil {
		return errors.NewField("VirtualBase", err)
	}
	// Deserialize `VirtualQuote`:
	err = decoder.Decode(&obj.VirtualQuote)
	if err != nil {
		return errors.NewField("VirtualQuote", err)
	}
	// Deserialize `RealBase`:
	err = decoder.Decode(&obj.RealBase)
	if err != nil {
		return errors.NewField("RealBase", err)
	}
	// Deserialize `RealQuote`:
	err = decoder.Decode(&obj.RealQuote)
	if err != nil {
		return errors.NewField("RealQuote", err)
	}
	// Deserialize `TotalQuoteFundRaising`:
	err = decoder.Decode(&obj.TotalQuoteFundRaising)
	if err != nil {
		return errors.NewField("TotalQuoteFundRaising", err)
	}
	// Deserialize `QuoteProtocolFee`:
	err = decoder.Decode(&obj.QuoteProtocolFee)
	if err != nil {
		return errors.NewField("QuoteProtocolFee", err)
	}
	// Deserialize `PlatformFee`:
	err = decoder.Decode(&obj.PlatformFee)
	if err != nil {
		return errors.NewField("PlatformFee", err)
	}
	// Deserialize `MigrateFee`:
	err = decoder.Decode(&obj.MigrateFee)
	if err != nil {
		return errors.NewField("MigrateFee", err)
	}
	// Deserialize `VestingSchedule`:
	err = decoder.Decode(&obj.VestingSchedule)
	if err != nil {
		return errors.NewField("VestingSchedule", err)
	}
	// Deserialize `GlobalConfig`:
	err = decoder.Decode(&obj.GlobalConfig)
	if err != nil {
		return errors.NewField("GlobalConfig", err)
	}
	// Deserialize `PlatformConfig`:
	err = decoder.Decode(&obj.PlatformConfig)
	if err != nil {
		return errors.NewField("PlatformConfig", err)
	}
	// Deserialize `BaseMint`:
	err = decoder.Decode(&obj.BaseMint)
	if err != nil {
		return errors.NewField("BaseMint", err)
	}
	// Deserialize `QuoteMint`:
	err = decoder.Decode(&obj.QuoteMint)
	if err != nil {
		return errors.NewField("QuoteMint", err)
	}
	// Deserialize `BaseVault`:
	err = decoder.Decode(&obj.BaseVault)
	if err != nil {
		return errors.NewField("BaseVault", err)
	}
	// Deserialize `QuoteVault`:
	err = decoder.Decode(&obj.QuoteVault)
	if err != nil {
		return errors.NewField("QuoteVault", err)
	}
	// Deserialize `Creator`:
	err = decoder.Decode(&obj.Creator)
	if err != nil {
		return errors.NewField("Creator", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *PoolState) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling PoolState: %w", err)
	}
	return nil
}

func UnmarshalPoolState(buf []byte) (*PoolState, error) {
	obj := new(PoolState)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

// Represents the different states a pool can be in
// * Fund - Initial state where pool is accepting funds
// * Migrate - Pool funding has ended and waiting for migration
// * Trade - Pool migration is complete and amm trading is enabled
type PoolStatus binary.BorshEnum

const (
	PoolStatus_Fund PoolStatus = iota
	PoolStatus_Migrate
	PoolStatus_Trade
)

func (value PoolStatus) String() string {
	switch value {
	case PoolStatus_Fund:
		return "Fund"
	case PoolStatus_Migrate:
		return "Migrate"
	case PoolStatus_Trade:
		return "Trade"
	default:
		return ""
	}
}

// Specifies the direction of a trade in the bonding curve
// This is important because curves can treat tokens differently through weights or offsets
type TradeDirection binary.BorshEnum

const (
	TradeDirection_Buy TradeDirection = iota
	TradeDirection_Sell
)

func (value TradeDirection) String() string {
	switch value {
	case TradeDirection_Buy:
		return "Buy"
	case TradeDirection_Sell:
		return "Sell"
	default:
		return ""
	}
}

// Emitted when trade process
type TradeEvent struct {
	PoolState       solanago.PublicKey `json:"poolState"`
	TotalBaseSell   uint64             `json:"totalBaseSell"`
	VirtualBase     uint64             `json:"virtualBase"`
	VirtualQuote    uint64             `json:"virtualQuote"`
	RealBaseBefore  uint64             `json:"realBaseBefore"`
	RealQuoteBefore uint64             `json:"realQuoteBefore"`
	RealBaseAfter   uint64             `json:"realBaseAfter"`
	RealQuoteAfter  uint64             `json:"realQuoteAfter"`
	AmountIn        uint64             `json:"amountIn"`
	AmountOut       uint64             `json:"amountOut"`
	ProtocolFee     uint64             `json:"protocolFee"`
	PlatformFee     uint64             `json:"platformFee"`
	ShareFee        uint64             `json:"shareFee"`
	TradeDirection  TradeDirection     `json:"tradeDirection"`
	PoolStatus      PoolStatus         `json:"poolStatus"`
}

func (obj TradeEvent) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `PoolState`:
	err = encoder.Encode(obj.PoolState)
	if err != nil {
		return errors.NewField("PoolState", err)
	}
	// Serialize `TotalBaseSell`:
	err = encoder.Encode(obj.TotalBaseSell)
	if err != nil {
		return errors.NewField("TotalBaseSell", err)
	}
	// Serialize `VirtualBase`:
	err = encoder.Encode(obj.VirtualBase)
	if err != nil {
		return errors.NewField("VirtualBase", err)
	}
	// Serialize `VirtualQuote`:
	err = encoder.Encode(obj.VirtualQuote)
	if err != nil {
		return errors.NewField("VirtualQuote", err)
	}
	// Serialize `RealBaseBefore`:
	err = encoder.Encode(obj.RealBaseBefore)
	if err != nil {
		return errors.NewField("RealBaseBefore", err)
	}
	// Serialize `RealQuoteBefore`:
	err = encoder.Encode(obj.RealQuoteBefore)
	if err != nil {
		return errors.NewField("RealQuoteBefore", err)
	}
	// Serialize `RealBaseAfter`:
	err = encoder.Encode(obj.RealBaseAfter)
	if err != nil {
		return errors.NewField("RealBaseAfter", err)
	}
	// Serialize `RealQuoteAfter`:
	err = encoder.Encode(obj.RealQuoteAfter)
	if err != nil {
		return errors.NewField("RealQuoteAfter", err)
	}
	// Serialize `AmountIn`:
	err = encoder.Encode(obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Serialize `AmountOut`:
	err = encoder.Encode(obj.AmountOut)
	if err != nil {
		return errors.NewField("AmountOut", err)
	}
	// Serialize `ProtocolFee`:
	err = encoder.Encode(obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Serialize `PlatformFee`:
	err = encoder.Encode(obj.PlatformFee)
	if err != nil {
		return errors.NewField("PlatformFee", err)
	}
	// Serialize `ShareFee`:
	err = encoder.Encode(obj.ShareFee)
	if err != nil {
		return errors.NewField("ShareFee", err)
	}
	// Serialize `TradeDirection`:
	err = encoder.Encode(obj.TradeDirection)
	if err != nil {
		return errors.NewField("TradeDirection", err)
	}
	// Serialize `PoolStatus`:
	err = encoder.Encode(obj.PoolStatus)
	if err != nil {
		return errors.NewField("PoolStatus", err)
	}
	return nil
}

func (obj TradeEvent) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding TradeEvent: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *TradeEvent) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `PoolState`:
	err = decoder.Decode(&obj.PoolState)
	if err != nil {
		return errors.NewField("PoolState", err)
	}
	// Deserialize `TotalBaseSell`:
	err = decoder.Decode(&obj.TotalBaseSell)
	if err != nil {
		return errors.NewField("TotalBaseSell", err)
	}
	// Deserialize `VirtualBase`:
	err = decoder.Decode(&obj.VirtualBase)
	if err != nil {
		return errors.NewField("VirtualBase", err)
	}
	// Deserialize `VirtualQuote`:
	err = decoder.Decode(&obj.VirtualQuote)
	if err != nil {
		return errors.NewField("VirtualQuote", err)
	}
	// Deserialize `RealBaseBefore`:
	err = decoder.Decode(&obj.RealBaseBefore)
	if err != nil {
		return errors.NewField("RealBaseBefore", err)
	}
	// Deserialize `RealQuoteBefore`:
	err = decoder.Decode(&obj.RealQuoteBefore)
	if err != nil {
		return errors.NewField("RealQuoteBefore", err)
	}
	// Deserialize `RealBaseAfter`:
	err = decoder.Decode(&obj.RealBaseAfter)
	if err != nil {
		return errors.NewField("RealBaseAfter", err)
	}
	// Deserialize `RealQuoteAfter`:
	err = decoder.Decode(&obj.RealQuoteAfter)
	if err != nil {
		return errors.NewField("RealQuoteAfter", err)
	}
	// Deserialize `AmountIn`:
	err = decoder.Decode(&obj.AmountIn)
	if err != nil {
		return errors.NewField("AmountIn", err)
	}
	// Deserialize `AmountOut`:
	err = decoder.Decode(&obj.AmountOut)
	if err != nil {
		return errors.NewField("AmountOut", err)
	}
	// Deserialize `ProtocolFee`:
	err = decoder.Decode(&obj.ProtocolFee)
	if err != nil {
		return errors.NewField("ProtocolFee", err)
	}
	// Deserialize `PlatformFee`:
	err = decoder.Decode(&obj.PlatformFee)
	if err != nil {
		return errors.NewField("PlatformFee", err)
	}
	// Deserialize `ShareFee`:
	err = decoder.Decode(&obj.ShareFee)
	if err != nil {
		return errors.NewField("ShareFee", err)
	}
	// Deserialize `TradeDirection`:
	err = decoder.Decode(&obj.TradeDirection)
	if err != nil {
		return errors.NewField("TradeDirection", err)
	}
	// Deserialize `PoolStatus`:
	err = decoder.Decode(&obj.PoolStatus)
	if err != nil {
		return errors.NewField("PoolStatus", err)
	}
	return nil
}

func (obj *TradeEvent) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling TradeEvent: %w", err)
	}
	return nil
}

func UnmarshalTradeEvent(buf []byte) (*TradeEvent, error) {
	obj := new(TradeEvent)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type VestingParams struct {
	TotalLockedAmount uint64 `json:"totalLockedAmount"`
	CliffPeriod       uint64 `json:"cliffPeriod"`
	UnlockPeriod      uint64 `json:"unlockPeriod"`
}

func (obj VestingParams) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalLockedAmount`:
	err = encoder.Encode(obj.TotalLockedAmount)
	if err != nil {
		return errors.NewField("TotalLockedAmount", err)
	}
	// Serialize `CliffPeriod`:
	err = encoder.Encode(obj.CliffPeriod)
	if err != nil {
		return errors.NewField("CliffPeriod", err)
	}
	// Serialize `UnlockPeriod`:
	err = encoder.Encode(obj.UnlockPeriod)
	if err != nil {
		return errors.NewField("UnlockPeriod", err)
	}
	return nil
}

func (obj VestingParams) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VestingParams: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VestingParams) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalLockedAmount`:
	err = decoder.Decode(&obj.TotalLockedAmount)
	if err != nil {
		return errors.NewField("TotalLockedAmount", err)
	}
	// Deserialize `CliffPeriod`:
	err = decoder.Decode(&obj.CliffPeriod)
	if err != nil {
		return errors.NewField("CliffPeriod", err)
	}
	// Deserialize `UnlockPeriod`:
	err = decoder.Decode(&obj.UnlockPeriod)
	if err != nil {
		return errors.NewField("UnlockPeriod", err)
	}
	return nil
}

func (obj *VestingParams) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VestingParams: %w", err)
	}
	return nil
}

func UnmarshalVestingParams(buf []byte) (*VestingParams, error) {
	obj := new(VestingParams)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type VestingRecord struct {
	// Account update epoch
	Epoch uint64 `json:"epoch"`

	// The pool state account
	Pool solanago.PublicKey `json:"pool"`

	// The beneficiary of the vesting account
	Beneficiary solanago.PublicKey `json:"beneficiary"`

	// The amount of tokens claimed
	ClaimedAmount uint64 `json:"claimedAmount"`

	// The share amount of the token to be vested
	TokenShareAmount uint64 `json:"tokenShareAmount"`

	// padding for future updates
	Padding [8]uint64 `json:"padding"`
}

func (obj VestingRecord) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `Epoch`:
	err = encoder.Encode(obj.Epoch)
	if err != nil {
		return errors.NewField("Epoch", err)
	}
	// Serialize `Pool`:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Serialize `Beneficiary`:
	err = encoder.Encode(obj.Beneficiary)
	if err != nil {
		return errors.NewField("Beneficiary", err)
	}
	// Serialize `ClaimedAmount`:
	err = encoder.Encode(obj.ClaimedAmount)
	if err != nil {
		return errors.NewField("ClaimedAmount", err)
	}
	// Serialize `TokenShareAmount`:
	err = encoder.Encode(obj.TokenShareAmount)
	if err != nil {
		return errors.NewField("TokenShareAmount", err)
	}
	// Serialize `Padding`:
	err = encoder.Encode(obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj VestingRecord) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VestingRecord: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VestingRecord) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `Epoch`:
	err = decoder.Decode(&obj.Epoch)
	if err != nil {
		return errors.NewField("Epoch", err)
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return errors.NewField("Pool", err)
	}
	// Deserialize `Beneficiary`:
	err = decoder.Decode(&obj.Beneficiary)
	if err != nil {
		return errors.NewField("Beneficiary", err)
	}
	// Deserialize `ClaimedAmount`:
	err = decoder.Decode(&obj.ClaimedAmount)
	if err != nil {
		return errors.NewField("ClaimedAmount", err)
	}
	// Deserialize `TokenShareAmount`:
	err = decoder.Decode(&obj.TokenShareAmount)
	if err != nil {
		return errors.NewField("TokenShareAmount", err)
	}
	// Deserialize `Padding`:
	err = decoder.Decode(&obj.Padding)
	if err != nil {
		return errors.NewField("Padding", err)
	}
	return nil
}

func (obj *VestingRecord) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VestingRecord: %w", err)
	}
	return nil
}

func UnmarshalVestingRecord(buf []byte) (*VestingRecord, error) {
	obj := new(VestingRecord)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}

type VestingSchedule struct {
	TotalLockedAmount uint64 `json:"totalLockedAmount"`
	CliffPeriod       uint64 `json:"cliffPeriod"`
	UnlockPeriod      uint64 `json:"unlockPeriod"`
	StartTime         uint64 `json:"startTime"`

	// Total allocated share amount of the base token, not greater than total_locked_amount
	AllocatedShareAmount uint64 `json:"allocatedShareAmount"`
}

func (obj VestingSchedule) MarshalWithEncoder(encoder *binary.Encoder) (err error) {
	// Serialize `TotalLockedAmount`:
	err = encoder.Encode(obj.TotalLockedAmount)
	if err != nil {
		return errors.NewField("TotalLockedAmount", err)
	}
	// Serialize `CliffPeriod`:
	err = encoder.Encode(obj.CliffPeriod)
	if err != nil {
		return errors.NewField("CliffPeriod", err)
	}
	// Serialize `UnlockPeriod`:
	err = encoder.Encode(obj.UnlockPeriod)
	if err != nil {
		return errors.NewField("UnlockPeriod", err)
	}
	// Serialize `StartTime`:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return errors.NewField("StartTime", err)
	}
	// Serialize `AllocatedShareAmount`:
	err = encoder.Encode(obj.AllocatedShareAmount)
	if err != nil {
		return errors.NewField("AllocatedShareAmount", err)
	}
	return nil
}

func (obj VestingSchedule) Marshal() ([]byte, error) {
	buf := bytes.NewBuffer(nil)
	encoder := binary.NewBorshEncoder(buf)
	err := obj.MarshalWithEncoder(encoder)
	if err != nil {
		return nil, fmt.Errorf("error while encoding VestingSchedule: %w", err)
	}
	return buf.Bytes(), nil
}

func (obj *VestingSchedule) UnmarshalWithDecoder(decoder *binary.Decoder) (err error) {
	// Deserialize `TotalLockedAmount`:
	err = decoder.Decode(&obj.TotalLockedAmount)
	if err != nil {
		return errors.NewField("TotalLockedAmount", err)
	}
	// Deserialize `CliffPeriod`:
	err = decoder.Decode(&obj.CliffPeriod)
	if err != nil {
		return errors.NewField("CliffPeriod", err)
	}
	// Deserialize `UnlockPeriod`:
	err = decoder.Decode(&obj.UnlockPeriod)
	if err != nil {
		return errors.NewField("UnlockPeriod", err)
	}
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return errors.NewField("StartTime", err)
	}
	// Deserialize `AllocatedShareAmount`:
	err = decoder.Decode(&obj.AllocatedShareAmount)
	if err != nil {
		return errors.NewField("AllocatedShareAmount", err)
	}
	return nil
}

func (obj *VestingSchedule) Unmarshal(buf []byte) error {
	err := obj.UnmarshalWithDecoder(binary.NewBorshDecoder(buf))
	if err != nil {
		return fmt.Errorf("error while unmarshaling VestingSchedule: %w", err)
	}
	return nil
}

func UnmarshalVestingSchedule(buf []byte) (*VestingSchedule, error) {
	obj := new(VestingSchedule)
	err := obj.Unmarshal(buf)
	if err != nil {
		return nil, err
	}
	return obj, nil
}
